{"version":3,"names":["global","factory","exports","this","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","test","replace","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","charAt","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","oldToken","newText","newToken","substring","list","bull","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","blankLine","indent","trimStart","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","toLowerCase","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","lastParagraphClipped","_","leading","tabs","cutSrc","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","parser","langString","body","parse","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","Marked","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","tableToken","listToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","markedInstance","marked","getDefaults","n","module","icon","a","reduce","s","r","h","toUpperCase","f","m","className","variants","g","p","d","v","o","find","Z","w","titleClassName","x","assign","meta","variant","u","Repository","data","pages","Map","splash","load","fetch","json","parseEntries","log","splashEntries","entries","findPrev","entry","Array","from","path","undefined","prev","get","findNext","findRoute","route","parts","page","findRouteIn","found","children","window","atob","isSplash","img","startsWith","set","createPageEntry","markedAlert","xAppScss","XAppStyle0","XApp","componentWillLoad","addEventListener","loadRoute","render","Host","id","class","_a","alt","innerHTML","target","style","height","backgroundColor","hash","document","location","setTimeout","el","querySelector","scrollTop","xButtonScss","XButtonStyle0","XButton","componentDidLoad","key","xGithubContributorsScss","XGithubContributorsStyle0","XGithubContributors","contributors","html_url","login","avatar_url","xGithubLinkScss","XGithubLinkStyle0","XGithubLink","stargazers","stargazers_count","forks","_b","forks_count","xLogoScss","XLogoStyle0","XLogo","viewBox","preserveAspectRatio","size","transform","fill","xmlns","xNavbarScss","XNavbarStyle0","XNavbar","isPinned","pinned","renderMenu","isRoot","tabIndex","xPageScss","XPageStyle0","XPage","onEntryChanged","ref","mainEl","anchor","requestAnimationFrame","tagName","slugify","_d","_c","textContent","scrollIntoView","behavior","xSignatureScss","XSignatureStyle0","xSitemapScss","XSitemapStyle0","XSitemap","renderEntry","renderPath","result","chapters","slug"],"sources":["node_modules/marked/lib/marked.umd.js","node_modules/marked-alert/dist/index.umd.js","src/Repository.ts","src/Components/x-app.scss?tag=x-app","src/Components/x-app.tsx","src/Components/x-button.scss?tag=x-button&encapsulation=shadow","src/Components/x-button.tsx","src/Components/x-github-contributors.scss?tag=x-github-contributors&encapsulation=shadow","src/Components/x-github-contributors.tsx","src/Components/x-github-link.scss?tag=x-github-link&encapsulation=shadow","src/Components/x-github-link.tsx","src/Components/x-logo.scss?tag=x-logo&encapsulation=shadow","src/Components/x-logo.tsx","src/Components/x-navbar.scss?tag=x-navbar&encapsulation=shadow","src/Components/x-navbar.tsx","src/Components/x-page.scss?tag=x-page&encapsulation=shadow","src/Components/x-page.tsx","src/Components/x-signature.scss?tag=x-signature&encapsulation=shadow","src/Components/x-signature.tsx","src/Components/x-sitemap.scss?tag=x-sitemap&encapsulation=shadow","src/Components/x-sitemap.tsx"],"sourcesContent":["/**\n * marked v14.0.0 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.marked = {}));\n})(this, (function (exports) { 'use strict';\n\n    /**\n     * Gets the original marked default options.\n     */\n    function _getDefaults() {\n        return {\n            async: false,\n            breaks: false,\n            extensions: null,\n            gfm: true,\n            hooks: null,\n            pedantic: false,\n            renderer: null,\n            silent: false,\n            tokenizer: null,\n            walkTokens: null,\n        };\n    }\n    exports.defaults = _getDefaults();\n    function changeDefaults(newDefaults) {\n        exports.defaults = newDefaults;\n    }\n\n    /**\n     * Helpers\n     */\n    const escapeTest = /[&<>\"']/;\n    const escapeReplace = new RegExp(escapeTest.source, 'g');\n    const escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\n    const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\n    const escapeReplacements = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n    };\n    const getEscapeReplacement = (ch) => escapeReplacements[ch];\n    function escape$1(html, encode) {\n        if (encode) {\n            if (escapeTest.test(html)) {\n                return html.replace(escapeReplace, getEscapeReplacement);\n            }\n        }\n        else {\n            if (escapeTestNoEncode.test(html)) {\n                return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n            }\n        }\n        return html;\n    }\n    const caret = /(^|[^\\[])\\^/g;\n    function edit(regex, opt) {\n        let source = typeof regex === 'string' ? regex : regex.source;\n        opt = opt || '';\n        const obj = {\n            replace: (name, val) => {\n                let valSource = typeof val === 'string' ? val : val.source;\n                valSource = valSource.replace(caret, '$1');\n                source = source.replace(name, valSource);\n                return obj;\n            },\n            getRegex: () => {\n                return new RegExp(source, opt);\n            },\n        };\n        return obj;\n    }\n    function cleanUrl(href) {\n        try {\n            href = encodeURI(href).replace(/%25/g, '%');\n        }\n        catch {\n            return null;\n        }\n        return href;\n    }\n    const noopTest = { exec: () => null };\n    function splitCells(tableRow, count) {\n        // ensure that every cell-delimiting pipe has a space\n        // before it to distinguish it from an escaped pipe\n        const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n            let escaped = false;\n            let curr = offset;\n            while (--curr >= 0 && str[curr] === '\\\\')\n                escaped = !escaped;\n            if (escaped) {\n                // odd number of slashes means | is escaped\n                // so we leave it alone\n                return '|';\n            }\n            else {\n                // add space before unescaped |\n                return ' |';\n            }\n        }), cells = row.split(/ \\|/);\n        let i = 0;\n        // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n        if (!cells[0].trim()) {\n            cells.shift();\n        }\n        if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n            cells.pop();\n        }\n        if (count) {\n            if (cells.length > count) {\n                cells.splice(count);\n            }\n            else {\n                while (cells.length < count)\n                    cells.push('');\n            }\n        }\n        for (; i < cells.length; i++) {\n            // leading or trailing whitespace is ignored per the gfm spec\n            cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n        }\n        return cells;\n    }\n    /**\n     * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n     * /c*$/ is vulnerable to REDOS.\n     *\n     * @param str\n     * @param c\n     * @param invert Remove suffix of non-c chars instead. Default falsey.\n     */\n    function rtrim(str, c, invert) {\n        const l = str.length;\n        if (l === 0) {\n            return '';\n        }\n        // Length of suffix matching the invert condition.\n        let suffLen = 0;\n        // Step left until we fail to match the invert condition.\n        while (suffLen < l) {\n            const currChar = str.charAt(l - suffLen - 1);\n            if (currChar === c && !invert) {\n                suffLen++;\n            }\n            else if (currChar !== c && invert) {\n                suffLen++;\n            }\n            else {\n                break;\n            }\n        }\n        return str.slice(0, l - suffLen);\n    }\n    function findClosingBracket(str, b) {\n        if (str.indexOf(b[1]) === -1) {\n            return -1;\n        }\n        let level = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '\\\\') {\n                i++;\n            }\n            else if (str[i] === b[0]) {\n                level++;\n            }\n            else if (str[i] === b[1]) {\n                level--;\n                if (level < 0) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function outputLink(cap, link, raw, lexer) {\n        const href = link.href;\n        const title = link.title ? escape$1(link.title) : null;\n        const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n        if (cap[0].charAt(0) !== '!') {\n            lexer.state.inLink = true;\n            const token = {\n                type: 'link',\n                raw,\n                href,\n                title,\n                text,\n                tokens: lexer.inlineTokens(text),\n            };\n            lexer.state.inLink = false;\n            return token;\n        }\n        return {\n            type: 'image',\n            raw,\n            href,\n            title,\n            text: escape$1(text),\n        };\n    }\n    function indentCodeCompensation(raw, text) {\n        const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n        if (matchIndentToCode === null) {\n            return text;\n        }\n        const indentToCode = matchIndentToCode[1];\n        return text\n            .split('\\n')\n            .map(node => {\n            const matchIndentInNode = node.match(/^\\s+/);\n            if (matchIndentInNode === null) {\n                return node;\n            }\n            const [indentInNode] = matchIndentInNode;\n            if (indentInNode.length >= indentToCode.length) {\n                return node.slice(indentToCode.length);\n            }\n            return node;\n        })\n            .join('\\n');\n    }\n    /**\n     * Tokenizer\n     */\n    class _Tokenizer {\n        options;\n        rules; // set by the lexer\n        lexer; // set by the lexer\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        space(src) {\n            const cap = this.rules.block.newline.exec(src);\n            if (cap && cap[0].length > 0) {\n                return {\n                    type: 'space',\n                    raw: cap[0],\n                };\n            }\n        }\n        code(src) {\n            const cap = this.rules.block.code.exec(src);\n            if (cap) {\n                const text = cap[0].replace(/^ {1,4}/gm, '');\n                return {\n                    type: 'code',\n                    raw: cap[0],\n                    codeBlockStyle: 'indented',\n                    text: !this.options.pedantic\n                        ? rtrim(text, '\\n')\n                        : text,\n                };\n            }\n        }\n        fences(src) {\n            const cap = this.rules.block.fences.exec(src);\n            if (cap) {\n                const raw = cap[0];\n                const text = indentCodeCompensation(raw, cap[3] || '');\n                return {\n                    type: 'code',\n                    raw,\n                    lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                    text,\n                };\n            }\n        }\n        heading(src) {\n            const cap = this.rules.block.heading.exec(src);\n            if (cap) {\n                let text = cap[2].trim();\n                // remove trailing #s\n                if (/#$/.test(text)) {\n                    const trimmed = rtrim(text, '#');\n                    if (this.options.pedantic) {\n                        text = trimmed.trim();\n                    }\n                    else if (!trimmed || / $/.test(trimmed)) {\n                        // CommonMark requires space before trailing #s\n                        text = trimmed.trim();\n                    }\n                }\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[1].length,\n                    text,\n                    tokens: this.lexer.inline(text),\n                };\n            }\n        }\n        hr(src) {\n            const cap = this.rules.block.hr.exec(src);\n            if (cap) {\n                return {\n                    type: 'hr',\n                    raw: rtrim(cap[0], '\\n'),\n                };\n            }\n        }\n        blockquote(src) {\n            const cap = this.rules.block.blockquote.exec(src);\n            if (cap) {\n                let lines = rtrim(cap[0], '\\n').split('\\n');\n                let raw = '';\n                let text = '';\n                const tokens = [];\n                while (lines.length > 0) {\n                    let inBlockquote = false;\n                    const currentLines = [];\n                    let i;\n                    for (i = 0; i < lines.length; i++) {\n                        // get lines up to a continuation\n                        if (/^ {0,3}>/.test(lines[i])) {\n                            currentLines.push(lines[i]);\n                            inBlockquote = true;\n                        }\n                        else if (!inBlockquote) {\n                            currentLines.push(lines[i]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    lines = lines.slice(i);\n                    const currentRaw = currentLines.join('\\n');\n                    const currentText = currentRaw\n                        // precede setext continuation with 4 spaces so it isn't a setext\n                        .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                        .replace(/^ {0,3}>[ \\t]?/gm, '');\n                    raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                    text = text ? `${text}\\n${currentText}` : currentText;\n                    // parse blockquote lines as top level tokens\n                    // merge paragraphs if this is a continuation\n                    const top = this.lexer.state.top;\n                    this.lexer.state.top = true;\n                    this.lexer.blockTokens(currentText, tokens, true);\n                    this.lexer.state.top = top;\n                    // if there is no continuation then we are done\n                    if (lines.length === 0) {\n                        break;\n                    }\n                    const lastToken = tokens[tokens.length - 1];\n                    if (lastToken?.type === 'code') {\n                        // blockquote continuation cannot be preceded by a code block\n                        break;\n                    }\n                    else if (lastToken?.type === 'blockquote') {\n                        // include continuation in nested blockquote\n                        const oldToken = lastToken;\n                        const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                        const newToken = this.blockquote(newText);\n                        tokens[tokens.length - 1] = newToken;\n                        raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                        text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                        break;\n                    }\n                    else if (lastToken?.type === 'list') {\n                        // include continuation in nested list\n                        const oldToken = lastToken;\n                        const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                        const newToken = this.list(newText);\n                        tokens[tokens.length - 1] = newToken;\n                        raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                        text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                        lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                        continue;\n                    }\n                }\n                return {\n                    type: 'blockquote',\n                    raw,\n                    tokens,\n                    text,\n                };\n            }\n        }\n        list(src) {\n            let cap = this.rules.block.list.exec(src);\n            if (cap) {\n                let bull = cap[1].trim();\n                const isordered = bull.length > 1;\n                const list = {\n                    type: 'list',\n                    raw: '',\n                    ordered: isordered,\n                    start: isordered ? +bull.slice(0, -1) : '',\n                    loose: false,\n                    items: [],\n                };\n                bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n                if (this.options.pedantic) {\n                    bull = isordered ? bull : '[*+-]';\n                }\n                // Get next list item\n                const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n                let endsWithBlankLine = false;\n                // Check if current bullet point can start a new List Item\n                while (src) {\n                    let endEarly = false;\n                    let raw = '';\n                    let itemContents = '';\n                    if (!(cap = itemRegex.exec(src))) {\n                        break;\n                    }\n                    if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                        break;\n                    }\n                    raw = cap[0];\n                    src = src.substring(raw.length);\n                    let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                    let nextLine = src.split('\\n', 1)[0];\n                    let blankLine = !line.trim();\n                    let indent = 0;\n                    if (this.options.pedantic) {\n                        indent = 2;\n                        itemContents = line.trimStart();\n                    }\n                    else if (blankLine) {\n                        indent = cap[1].length + 1;\n                    }\n                    else {\n                        indent = cap[2].search(/[^ ]/); // Find first non-space char\n                        indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                        itemContents = line.slice(indent);\n                        indent += cap[1].length;\n                    }\n                    if (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                        raw += nextLine + '\\n';\n                        src = src.substring(nextLine.length + 1);\n                        endEarly = true;\n                    }\n                    if (!endEarly) {\n                        const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                        const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                        const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                        const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                        // Check if following lines should be included in List Item\n                        while (src) {\n                            const rawLine = src.split('\\n', 1)[0];\n                            nextLine = rawLine;\n                            // Re-align to follow commonmark nesting rules\n                            if (this.options.pedantic) {\n                                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                            }\n                            // End list item if found code fences\n                            if (fencesBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of new heading\n                            if (headingBeginRegex.test(nextLine)) {\n                                break;\n                            }\n                            // End list item if found start of new bullet\n                            if (nextBulletRegex.test(nextLine)) {\n                                break;\n                            }\n                            // Horizontal rule found\n                            if (hrRegex.test(src)) {\n                                break;\n                            }\n                            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                                itemContents += '\\n' + nextLine.slice(indent);\n                            }\n                            else {\n                                // not enough indentation\n                                if (blankLine) {\n                                    break;\n                                }\n                                // paragraph continuation unless last line was a different block level element\n                                if (line.search(/[^ ]/) >= 4) { // indented code block\n                                    break;\n                                }\n                                if (fencesBeginRegex.test(line)) {\n                                    break;\n                                }\n                                if (headingBeginRegex.test(line)) {\n                                    break;\n                                }\n                                if (hrRegex.test(line)) {\n                                    break;\n                                }\n                                itemContents += '\\n' + nextLine;\n                            }\n                            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                                blankLine = true;\n                            }\n                            raw += rawLine + '\\n';\n                            src = src.substring(rawLine.length + 1);\n                            line = nextLine.slice(indent);\n                        }\n                    }\n                    if (!list.loose) {\n                        // If the previous item ended with a blank line, the list is loose\n                        if (endsWithBlankLine) {\n                            list.loose = true;\n                        }\n                        else if (/\\n *\\n *$/.test(raw)) {\n                            endsWithBlankLine = true;\n                        }\n                    }\n                    let istask = null;\n                    let ischecked;\n                    // Check for task list items\n                    if (this.options.gfm) {\n                        istask = /^\\[[ xX]\\] /.exec(itemContents);\n                        if (istask) {\n                            ischecked = istask[0] !== '[ ] ';\n                            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                        }\n                    }\n                    list.items.push({\n                        type: 'list_item',\n                        raw,\n                        task: !!istask,\n                        checked: ischecked,\n                        loose: false,\n                        text: itemContents,\n                        tokens: [],\n                    });\n                    list.raw += raw;\n                }\n                // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n                list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n                list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n                list.raw = list.raw.trimEnd();\n                // Item child tokens handled here at end because we needed to have the final item to trim it first\n                for (let i = 0; i < list.items.length; i++) {\n                    this.lexer.state.top = false;\n                    list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                    if (!list.loose) {\n                        // Check if list should be loose\n                        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                        const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                        list.loose = hasMultipleLineBreaks;\n                    }\n                }\n                // Set all items to loose if list is loose\n                if (list.loose) {\n                    for (let i = 0; i < list.items.length; i++) {\n                        list.items[i].loose = true;\n                    }\n                }\n                return list;\n            }\n        }\n        html(src) {\n            const cap = this.rules.block.html.exec(src);\n            if (cap) {\n                const token = {\n                    type: 'html',\n                    block: true,\n                    raw: cap[0],\n                    pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                    text: cap[0],\n                };\n                return token;\n            }\n        }\n        def(src) {\n            const cap = this.rules.block.def.exec(src);\n            if (cap) {\n                const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n                const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n                const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n                return {\n                    type: 'def',\n                    tag,\n                    raw: cap[0],\n                    href,\n                    title,\n                };\n            }\n        }\n        table(src) {\n            const cap = this.rules.block.table.exec(src);\n            if (!cap) {\n                return;\n            }\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const headers = splitCells(cap[1]);\n            const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n            const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: [],\n                align: [],\n                rows: [],\n            };\n            if (headers.length !== aligns.length) {\n                // header and align columns must be equal, rows can be different.\n                return;\n            }\n            for (const align of aligns) {\n                if (/^ *-+: *$/.test(align)) {\n                    item.align.push('right');\n                }\n                else if (/^ *:-+: *$/.test(align)) {\n                    item.align.push('center');\n                }\n                else if (/^ *:-+ *$/.test(align)) {\n                    item.align.push('left');\n                }\n                else {\n                    item.align.push(null);\n                }\n            }\n            for (let i = 0; i < headers.length; i++) {\n                item.header.push({\n                    text: headers[i],\n                    tokens: this.lexer.inline(headers[i]),\n                    header: true,\n                    align: item.align[i],\n                });\n            }\n            for (const row of rows) {\n                item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                    return {\n                        text: cell,\n                        tokens: this.lexer.inline(cell),\n                        header: false,\n                        align: item.align[i],\n                    };\n                }));\n            }\n            return item;\n        }\n        lheading(src) {\n            const cap = this.rules.block.lheading.exec(src);\n            if (cap) {\n                return {\n                    type: 'heading',\n                    raw: cap[0],\n                    depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                    text: cap[1],\n                    tokens: this.lexer.inline(cap[1]),\n                };\n            }\n        }\n        paragraph(src) {\n            const cap = this.rules.block.paragraph.exec(src);\n            if (cap) {\n                const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                    ? cap[1].slice(0, -1)\n                    : cap[1];\n                return {\n                    type: 'paragraph',\n                    raw: cap[0],\n                    text,\n                    tokens: this.lexer.inline(text),\n                };\n            }\n        }\n        text(src) {\n            const cap = this.rules.block.text.exec(src);\n            if (cap) {\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text: cap[0],\n                    tokens: this.lexer.inline(cap[0]),\n                };\n            }\n        }\n        escape(src) {\n            const cap = this.rules.inline.escape.exec(src);\n            if (cap) {\n                return {\n                    type: 'escape',\n                    raw: cap[0],\n                    text: escape$1(cap[1]),\n                };\n            }\n        }\n        tag(src) {\n            const cap = this.rules.inline.tag.exec(src);\n            if (cap) {\n                if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                    this.lexer.state.inLink = true;\n                }\n                else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                    this.lexer.state.inLink = false;\n                }\n                if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                    this.lexer.state.inRawBlock = true;\n                }\n                else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                    this.lexer.state.inRawBlock = false;\n                }\n                return {\n                    type: 'html',\n                    raw: cap[0],\n                    inLink: this.lexer.state.inLink,\n                    inRawBlock: this.lexer.state.inRawBlock,\n                    block: false,\n                    text: cap[0],\n                };\n            }\n        }\n        link(src) {\n            const cap = this.rules.inline.link.exec(src);\n            if (cap) {\n                const trimmedUrl = cap[2].trim();\n                if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                    // commonmark requires matching angle brackets\n                    if (!(/>$/.test(trimmedUrl))) {\n                        return;\n                    }\n                    // ending angle bracket cannot be escaped\n                    const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                    if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                        return;\n                    }\n                }\n                else {\n                    // find closing parenthesis\n                    const lastParenIndex = findClosingBracket(cap[2], '()');\n                    if (lastParenIndex > -1) {\n                        const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                        const linkLen = start + cap[1].length + lastParenIndex;\n                        cap[2] = cap[2].substring(0, lastParenIndex);\n                        cap[0] = cap[0].substring(0, linkLen).trim();\n                        cap[3] = '';\n                    }\n                }\n                let href = cap[2];\n                let title = '';\n                if (this.options.pedantic) {\n                    // split pedantic href and title\n                    const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                    if (link) {\n                        href = link[1];\n                        title = link[3];\n                    }\n                }\n                else {\n                    title = cap[3] ? cap[3].slice(1, -1) : '';\n                }\n                href = href.trim();\n                if (/^</.test(href)) {\n                    if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                        // pedantic allows starting angle bracket without ending angle bracket\n                        href = href.slice(1);\n                    }\n                    else {\n                        href = href.slice(1, -1);\n                    }\n                }\n                return outputLink(cap, {\n                    href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                    title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n                }, cap[0], this.lexer);\n            }\n        }\n        reflink(src, links) {\n            let cap;\n            if ((cap = this.rules.inline.reflink.exec(src))\n                || (cap = this.rules.inline.nolink.exec(src))) {\n                const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n                const link = links[linkString.toLowerCase()];\n                if (!link) {\n                    const text = cap[0].charAt(0);\n                    return {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    };\n                }\n                return outputLink(cap, link, cap[0], this.lexer);\n            }\n        }\n        emStrong(src, maskedSrc, prevChar = '') {\n            let match = this.rules.inline.emStrongLDelim.exec(src);\n            if (!match)\n                return;\n            // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n            if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n                return;\n            const nextChar = match[1] || match[2] || '';\n            if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n                // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n                const lLength = [...match[0]].length - 1;\n                let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n                const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n                endReg.lastIndex = 0;\n                // Clip maskedSrc to same section of string as src (move to lexer?)\n                maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n                while ((match = endReg.exec(maskedSrc)) != null) {\n                    rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                    if (!rDelim)\n                        continue; // skip single * in __abc*abc__\n                    rLength = [...rDelim].length;\n                    if (match[3] || match[4]) { // found another Left Delim\n                        delimTotal += rLength;\n                        continue;\n                    }\n                    else if (match[5] || match[6]) { // either Left or Right Delim\n                        if (lLength % 3 && !((lLength + rLength) % 3)) {\n                            midDelimTotal += rLength;\n                            continue; // CommonMark Emphasis Rules 9-10\n                        }\n                    }\n                    delimTotal -= rLength;\n                    if (delimTotal > 0)\n                        continue; // Haven't found enough closing delimiters\n                    // Remove extra characters. *a*** -> *a*\n                    rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                    // char length can be >1 for unicode characters;\n                    const lastCharLength = [...match[0]][0].length;\n                    const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                    // Create `em` if smallest delimiter has odd char count. *a***\n                    if (Math.min(lLength, rLength) % 2) {\n                        const text = raw.slice(1, -1);\n                        return {\n                            type: 'em',\n                            raw,\n                            text,\n                            tokens: this.lexer.inlineTokens(text),\n                        };\n                    }\n                    // Create 'strong' if smallest delimiter has even char count. **a***\n                    const text = raw.slice(2, -2);\n                    return {\n                        type: 'strong',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n            }\n        }\n        codespan(src) {\n            const cap = this.rules.inline.code.exec(src);\n            if (cap) {\n                let text = cap[2].replace(/\\n/g, ' ');\n                const hasNonSpaceChars = /[^ ]/.test(text);\n                const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n                if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                    text = text.substring(1, text.length - 1);\n                }\n                text = escape$1(text, true);\n                return {\n                    type: 'codespan',\n                    raw: cap[0],\n                    text,\n                };\n            }\n        }\n        br(src) {\n            const cap = this.rules.inline.br.exec(src);\n            if (cap) {\n                return {\n                    type: 'br',\n                    raw: cap[0],\n                };\n            }\n        }\n        del(src) {\n            const cap = this.rules.inline.del.exec(src);\n            if (cap) {\n                return {\n                    type: 'del',\n                    raw: cap[0],\n                    text: cap[2],\n                    tokens: this.lexer.inlineTokens(cap[2]),\n                };\n            }\n        }\n        autolink(src) {\n            const cap = this.rules.inline.autolink.exec(src);\n            if (cap) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = escape$1(cap[1]);\n                    href = 'mailto:' + text;\n                }\n                else {\n                    text = escape$1(cap[1]);\n                    href = text;\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text,\n                    href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text,\n                        },\n                    ],\n                };\n            }\n        }\n        url(src) {\n            let cap;\n            if (cap = this.rules.inline.url.exec(src)) {\n                let text, href;\n                if (cap[2] === '@') {\n                    text = escape$1(cap[0]);\n                    href = 'mailto:' + text;\n                }\n                else {\n                    // do extended autolink path validation\n                    let prevCapZero;\n                    do {\n                        prevCapZero = cap[0];\n                        cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                    } while (prevCapZero !== cap[0]);\n                    text = escape$1(cap[0]);\n                    if (cap[1] === 'www.') {\n                        href = 'http://' + cap[0];\n                    }\n                    else {\n                        href = cap[0];\n                    }\n                }\n                return {\n                    type: 'link',\n                    raw: cap[0],\n                    text,\n                    href,\n                    tokens: [\n                        {\n                            type: 'text',\n                            raw: text,\n                            text,\n                        },\n                    ],\n                };\n            }\n        }\n        inlineText(src) {\n            const cap = this.rules.inline.text.exec(src);\n            if (cap) {\n                let text;\n                if (this.lexer.state.inRawBlock) {\n                    text = cap[0];\n                }\n                else {\n                    text = escape$1(cap[0]);\n                }\n                return {\n                    type: 'text',\n                    raw: cap[0],\n                    text,\n                };\n            }\n        }\n    }\n\n    /**\n     * Block-Level Grammar\n     */\n    const newline = /^(?: *(?:\\n|$))+/;\n    const blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\n    const fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\n    const hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\n    const heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\n    const bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n    const lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n        .replace(/bull/g, bullet) // lists can interrupt\n        .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n        .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n        .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n        .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n        .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n        .getRegex();\n    const _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\n    const blockText = /^[^\\n]+/;\n    const _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\n    const def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n        .replace('label', _blockLabel)\n        .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n        .getRegex();\n    const list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n        .replace(/bull/g, bullet)\n        .getRegex();\n    const _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n        + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n        + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n        + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n        + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n        + '|tr|track|ul';\n    const _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\n    const html = edit('^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')', 'i')\n        .replace('comment', _comment)\n        .replace('tag', _tag)\n        .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n        .getRegex();\n    const paragraph = edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex();\n    const blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n        .replace('paragraph', paragraph)\n        .getRegex();\n    /**\n     * Normal Block Grammar\n     */\n    const blockNormal = {\n        blockquote,\n        code: blockCode,\n        def,\n        fences,\n        heading,\n        hr,\n        html,\n        lheading,\n        list,\n        newline,\n        paragraph,\n        table: noopTest,\n        text: blockText,\n    };\n    /**\n     * GFM Block Grammar\n     */\n    const gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('blockquote', ' {0,3}>')\n        .replace('code', ' {4}[^\\\\n]')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n        .getRegex();\n    const blockGfm = {\n        ...blockNormal,\n        table: gfmTable,\n        paragraph: edit(_paragraph)\n            .replace('hr', hr)\n            .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n            .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n            .replace('table', gfmTable) // interrupt paragraphs with table\n            .replace('blockquote', ' {0,3}>')\n            .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n            .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n            .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n            .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n            .getRegex(),\n    };\n    /**\n     * Pedantic grammar (original John Gruber's loose markdown specification)\n     */\n    const blockPedantic = {\n        ...blockNormal,\n        html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n            + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n            + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n            .replace('comment', _comment)\n            .replace(/tag/g, '(?!(?:'\n            + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n            + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n            + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n            .getRegex(),\n        def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n        heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n        fences: noopTest, // fences not supported\n        lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n        paragraph: edit(_paragraph)\n            .replace('hr', hr)\n            .replace('heading', ' *#{1,6} *[^\\n]')\n            .replace('lheading', lheading)\n            .replace('|table', '')\n            .replace('blockquote', ' {0,3}>')\n            .replace('|fences', '')\n            .replace('|list', '')\n            .replace('|html', '')\n            .replace('|tag', '')\n            .getRegex(),\n    };\n    /**\n     * Inline-Level Grammar\n     */\n    const escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\n    const inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\n    const br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\n    const inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n    // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n    const _punctuation = '\\\\p{P}\\\\p{S}';\n    const punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n        .replace(/punctuation/g, _punctuation).getRegex();\n    // sequences em should skip over [title](link), `code`, <html>\n    const blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\n    const emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n        + '|[^*]+(?=[^*])' // Consume to delim\n        + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n        + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n        + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n        + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n        + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n        + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    // (6) Not allowed for _\n    const emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n        + '|[^_]+(?=[^_])' // Consume to delim\n        + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n        + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n        + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n        + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n        + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const anyPunctuation = edit(/\\\\([punct])/, 'gu')\n        .replace(/punct/g, _punctuation)\n        .getRegex();\n    const autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n        .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n        .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n        .getRegex();\n    const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\n    const tag = edit('^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n        .replace('comment', _inlineComment)\n        .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n        .getRegex();\n    const _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n    const link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n        .replace('label', _inlineLabel)\n        .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n        .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n        .getRegex();\n    const reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n        .replace('label', _inlineLabel)\n        .replace('ref', _blockLabel)\n        .getRegex();\n    const nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n        .replace('ref', _blockLabel)\n        .getRegex();\n    const reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n        .replace('reflink', reflink)\n        .replace('nolink', nolink)\n        .getRegex();\n    /**\n     * Normal Inline Grammar\n     */\n    const inlineNormal = {\n        _backpedal: noopTest, // only used for GFM url\n        anyPunctuation,\n        autolink,\n        blockSkip,\n        br,\n        code: inlineCode,\n        del: noopTest,\n        emStrongLDelim,\n        emStrongRDelimAst,\n        emStrongRDelimUnd,\n        escape,\n        link,\n        nolink,\n        punctuation,\n        reflink,\n        reflinkSearch,\n        tag,\n        text: inlineText,\n        url: noopTest,\n    };\n    /**\n     * Pedantic Inline Grammar\n     */\n    const inlinePedantic = {\n        ...inlineNormal,\n        link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n            .replace('label', _inlineLabel)\n            .getRegex(),\n        reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n            .replace('label', _inlineLabel)\n            .getRegex(),\n    };\n    /**\n     * GFM Inline Grammar\n     */\n    const inlineGfm = {\n        ...inlineNormal,\n        escape: edit(escape).replace('])', '~|])').getRegex(),\n        url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n            .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n            .getRegex(),\n        _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n        del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n        text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n    };\n    /**\n     * GFM + Line Breaks Inline Grammar\n     */\n    const inlineBreaks = {\n        ...inlineGfm,\n        br: edit(br).replace('{2,}', '*').getRegex(),\n        text: edit(inlineGfm.text)\n            .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n            .replace(/\\{2,\\}/g, '*')\n            .getRegex(),\n    };\n    /**\n     * exports\n     */\n    const block = {\n        normal: blockNormal,\n        gfm: blockGfm,\n        pedantic: blockPedantic,\n    };\n    const inline = {\n        normal: inlineNormal,\n        gfm: inlineGfm,\n        breaks: inlineBreaks,\n        pedantic: inlinePedantic,\n    };\n\n    /**\n     * Block Lexer\n     */\n    class _Lexer {\n        tokens;\n        options;\n        state;\n        tokenizer;\n        inlineQueue;\n        constructor(options) {\n            // TokenList cannot be created in one go\n            this.tokens = [];\n            this.tokens.links = Object.create(null);\n            this.options = options || exports.defaults;\n            this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n            this.tokenizer = this.options.tokenizer;\n            this.tokenizer.options = this.options;\n            this.tokenizer.lexer = this;\n            this.inlineQueue = [];\n            this.state = {\n                inLink: false,\n                inRawBlock: false,\n                top: true,\n            };\n            const rules = {\n                block: block.normal,\n                inline: inline.normal,\n            };\n            if (this.options.pedantic) {\n                rules.block = block.pedantic;\n                rules.inline = inline.pedantic;\n            }\n            else if (this.options.gfm) {\n                rules.block = block.gfm;\n                if (this.options.breaks) {\n                    rules.inline = inline.breaks;\n                }\n                else {\n                    rules.inline = inline.gfm;\n                }\n            }\n            this.tokenizer.rules = rules;\n        }\n        /**\n         * Expose Rules\n         */\n        static get rules() {\n            return {\n                block,\n                inline,\n            };\n        }\n        /**\n         * Static Lex Method\n         */\n        static lex(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.lex(src);\n        }\n        /**\n         * Static Lex Inline Method\n         */\n        static lexInline(src, options) {\n            const lexer = new _Lexer(options);\n            return lexer.inlineTokens(src);\n        }\n        /**\n         * Preprocessing\n         */\n        lex(src) {\n            src = src\n                .replace(/\\r\\n|\\r/g, '\\n');\n            this.blockTokens(src, this.tokens);\n            for (let i = 0; i < this.inlineQueue.length; i++) {\n                const next = this.inlineQueue[i];\n                this.inlineTokens(next.src, next.tokens);\n            }\n            this.inlineQueue = [];\n            return this.tokens;\n        }\n        blockTokens(src, tokens = [], lastParagraphClipped = false) {\n            if (this.options.pedantic) {\n                src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n            }\n            else {\n                src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                    return leading + '    '.repeat(tabs.length);\n                });\n            }\n            let token;\n            let lastToken;\n            let cutSrc;\n            while (src) {\n                if (this.options.extensions\n                    && this.options.extensions.block\n                    && this.options.extensions.block.some((extTokenizer) => {\n                        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                            src = src.substring(token.raw.length);\n                            tokens.push(token);\n                            return true;\n                        }\n                        return false;\n                    })) {\n                    continue;\n                }\n                // newline\n                if (token = this.tokenizer.space(src)) {\n                    src = src.substring(token.raw.length);\n                    if (token.raw.length === 1 && tokens.length > 0) {\n                        // if there's a single \\n as a spacer, it's terminating the last line,\n                        // so move it there so that we don't get unnecessary paragraph tags\n                        tokens[tokens.length - 1].raw += '\\n';\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.code(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    // An indented code block cannot interrupt a paragraph.\n                    if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // fences\n                if (token = this.tokenizer.fences(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // heading\n                if (token = this.tokenizer.heading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // hr\n                if (token = this.tokenizer.hr(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // blockquote\n                if (token = this.tokenizer.blockquote(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // list\n                if (token = this.tokenizer.list(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // html\n                if (token = this.tokenizer.html(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // def\n                if (token = this.tokenizer.def(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.raw;\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else if (!this.tokens.links[token.tag]) {\n                        this.tokens.links[token.tag] = {\n                            href: token.href,\n                            title: token.title,\n                        };\n                    }\n                    continue;\n                }\n                // table (gfm)\n                if (token = this.tokenizer.table(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // lheading\n                if (token = this.tokenizer.lheading(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // top-level paragraph\n                // prevent paragraph consuming extensions by clipping 'src' to extension start\n                cutSrc = src;\n                if (this.options.extensions && this.options.extensions.startBlock) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startBlock.forEach((getStartIndex) => {\n                        tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) {\n                            startIndex = Math.min(startIndex, tempStart);\n                        }\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) {\n                        cutSrc = src.substring(0, startIndex + 1);\n                    }\n                }\n                if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    lastParagraphClipped = (cutSrc.length !== src.length);\n                    src = src.substring(token.raw.length);\n                    continue;\n                }\n                // text\n                if (token = this.tokenizer.text(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && lastToken.type === 'text') {\n                        lastToken.raw += '\\n' + token.raw;\n                        lastToken.text += '\\n' + token.text;\n                        this.inlineQueue.pop();\n                        this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n            this.state.top = true;\n            return tokens;\n        }\n        inline(src, tokens = []) {\n            this.inlineQueue.push({ src, tokens });\n            return tokens;\n        }\n        /**\n         * Lexing/Compiling\n         */\n        inlineTokens(src, tokens = []) {\n            let token, lastToken, cutSrc;\n            // String with links masked to avoid interference with em and strong\n            let maskedSrc = src;\n            let match;\n            let keepPrevChar, prevChar;\n            // Mask out reflinks\n            if (this.tokens.links) {\n                const links = Object.keys(this.tokens.links);\n                if (links.length > 0) {\n                    while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                        if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                        }\n                    }\n                }\n            }\n            // Mask out other blocks\n            while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n                maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n            }\n            // Mask out escaped characters\n            while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n                maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n            }\n            while (src) {\n                if (!keepPrevChar) {\n                    prevChar = '';\n                }\n                keepPrevChar = false;\n                // extensions\n                if (this.options.extensions\n                    && this.options.extensions.inline\n                    && this.options.extensions.inline.some((extTokenizer) => {\n                        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                            src = src.substring(token.raw.length);\n                            tokens.push(token);\n                            return true;\n                        }\n                        return false;\n                    })) {\n                    continue;\n                }\n                // escape\n                if (token = this.tokenizer.escape(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // tag\n                if (token = this.tokenizer.tag(src)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // link\n                if (token = this.tokenizer.link(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // reflink, nolink\n                if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                    src = src.substring(token.raw.length);\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                // em & strong\n                if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // code\n                if (token = this.tokenizer.codespan(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // br\n                if (token = this.tokenizer.br(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // del (gfm)\n                if (token = this.tokenizer.del(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // autolink\n                if (token = this.tokenizer.autolink(src)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // url (gfm)\n                if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    continue;\n                }\n                // text\n                // prevent inlineText consuming extensions by clipping 'src' to extension start\n                cutSrc = src;\n                if (this.options.extensions && this.options.extensions.startInline) {\n                    let startIndex = Infinity;\n                    const tempSrc = src.slice(1);\n                    let tempStart;\n                    this.options.extensions.startInline.forEach((getStartIndex) => {\n                        tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                        if (typeof tempStart === 'number' && tempStart >= 0) {\n                            startIndex = Math.min(startIndex, tempStart);\n                        }\n                    });\n                    if (startIndex < Infinity && startIndex >= 0) {\n                        cutSrc = src.substring(0, startIndex + 1);\n                    }\n                }\n                if (token = this.tokenizer.inlineText(cutSrc)) {\n                    src = src.substring(token.raw.length);\n                    if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                        prevChar = token.raw.slice(-1);\n                    }\n                    keepPrevChar = true;\n                    lastToken = tokens[tokens.length - 1];\n                    if (lastToken && lastToken.type === 'text') {\n                        lastToken.raw += token.raw;\n                        lastToken.text += token.text;\n                    }\n                    else {\n                        tokens.push(token);\n                    }\n                    continue;\n                }\n                if (src) {\n                    const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        break;\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n            return tokens;\n        }\n    }\n\n    /**\n     * Renderer\n     */\n    class _Renderer {\n        options;\n        parser; // set by the parser\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        space(token) {\n            return '';\n        }\n        code({ text, lang, escaped }) {\n            const langString = (lang || '').match(/^\\S*/)?.[0];\n            const code = text.replace(/\\n$/, '') + '\\n';\n            if (!langString) {\n                return '<pre><code>'\n                    + (escaped ? code : escape$1(code, true))\n                    + '</code></pre>\\n';\n            }\n            return '<pre><code class=\"language-'\n                + escape$1(langString)\n                + '\">'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        blockquote({ tokens }) {\n            const body = this.parser.parse(tokens);\n            return `<blockquote>\\n${body}</blockquote>\\n`;\n        }\n        html({ text }) {\n            return text;\n        }\n        heading({ tokens, depth }) {\n            return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n        }\n        hr(token) {\n            return '<hr>\\n';\n        }\n        list(token) {\n            const ordered = token.ordered;\n            const start = token.start;\n            let body = '';\n            for (let j = 0; j < token.items.length; j++) {\n                const item = token.items[j];\n                body += this.listitem(item);\n            }\n            const type = ordered ? 'ol' : 'ul';\n            const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n            return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n        }\n        listitem(item) {\n            let itemBody = '';\n            if (item.task) {\n                const checkbox = this.checkbox({ checked: !!item.checked });\n                if (item.loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                        item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                        if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                            item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                        }\n                    }\n                    else {\n                        item.tokens.unshift({\n                            type: 'text',\n                            raw: checkbox + ' ',\n                            text: checkbox + ' ',\n                        });\n                    }\n                }\n                else {\n                    itemBody += checkbox + ' ';\n                }\n            }\n            itemBody += this.parser.parse(item.tokens, !!item.loose);\n            return `<li>${itemBody}</li>\\n`;\n        }\n        checkbox({ checked }) {\n            return '<input '\n                + (checked ? 'checked=\"\" ' : '')\n                + 'disabled=\"\" type=\"checkbox\">';\n        }\n        paragraph({ tokens }) {\n            return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n        }\n        table(token) {\n            let header = '';\n            // header\n            let cell = '';\n            for (let j = 0; j < token.header.length; j++) {\n                cell += this.tablecell(token.header[j]);\n            }\n            header += this.tablerow({ text: cell });\n            let body = '';\n            for (let j = 0; j < token.rows.length; j++) {\n                const row = token.rows[j];\n                cell = '';\n                for (let k = 0; k < row.length; k++) {\n                    cell += this.tablecell(row[k]);\n                }\n                body += this.tablerow({ text: cell });\n            }\n            if (body)\n                body = `<tbody>${body}</tbody>`;\n            return '<table>\\n'\n                + '<thead>\\n'\n                + header\n                + '</thead>\\n'\n                + body\n                + '</table>\\n';\n        }\n        tablerow({ text }) {\n            return `<tr>\\n${text}</tr>\\n`;\n        }\n        tablecell(token) {\n            const content = this.parser.parseInline(token.tokens);\n            const type = token.header ? 'th' : 'td';\n            const tag = token.align\n                ? `<${type} align=\"${token.align}\">`\n                : `<${type}>`;\n            return tag + content + `</${type}>\\n`;\n        }\n        /**\n         * span level renderer\n         */\n        strong({ tokens }) {\n            return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n        }\n        em({ tokens }) {\n            return `<em>${this.parser.parseInline(tokens)}</em>`;\n        }\n        codespan({ text }) {\n            return `<code>${text}</code>`;\n        }\n        br(token) {\n            return '<br>';\n        }\n        del({ tokens }) {\n            return `<del>${this.parser.parseInline(tokens)}</del>`;\n        }\n        link({ href, title, tokens }) {\n            const text = this.parser.parseInline(tokens);\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) {\n                return text;\n            }\n            href = cleanHref;\n            let out = '<a href=\"' + href + '\"';\n            if (title) {\n                out += ' title=\"' + title + '\"';\n            }\n            out += '>' + text + '</a>';\n            return out;\n        }\n        image({ href, title, text }) {\n            const cleanHref = cleanUrl(href);\n            if (cleanHref === null) {\n                return text;\n            }\n            href = cleanHref;\n            let out = `<img src=\"${href}\" alt=\"${text}\"`;\n            if (title) {\n                out += ` title=\"${title}\"`;\n            }\n            out += '>';\n            return out;\n        }\n        text(token) {\n            return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n        }\n    }\n\n    /**\n     * TextRenderer\n     * returns only the textual part of the token\n     */\n    class _TextRenderer {\n        // no need for block level renderers\n        strong({ text }) {\n            return text;\n        }\n        em({ text }) {\n            return text;\n        }\n        codespan({ text }) {\n            return text;\n        }\n        del({ text }) {\n            return text;\n        }\n        html({ text }) {\n            return text;\n        }\n        text({ text }) {\n            return text;\n        }\n        link({ text }) {\n            return '' + text;\n        }\n        image({ text }) {\n            return '' + text;\n        }\n        br() {\n            return '';\n        }\n    }\n\n    /**\n     * Parsing & Compiling\n     */\n    class _Parser {\n        options;\n        renderer;\n        textRenderer;\n        constructor(options) {\n            this.options = options || exports.defaults;\n            this.options.renderer = this.options.renderer || new _Renderer();\n            this.renderer = this.options.renderer;\n            this.renderer.options = this.options;\n            this.renderer.parser = this;\n            this.textRenderer = new _TextRenderer();\n        }\n        /**\n         * Static Parse Method\n         */\n        static parse(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parse(tokens);\n        }\n        /**\n         * Static Parse Inline Method\n         */\n        static parseInline(tokens, options) {\n            const parser = new _Parser(options);\n            return parser.parseInline(tokens);\n        }\n        /**\n         * Parse Loop\n         */\n        parse(tokens, top = true) {\n            let out = '';\n            for (let i = 0; i < tokens.length; i++) {\n                const anyToken = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                    const genericToken = anyToken;\n                    const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                    if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                const token = anyToken;\n                switch (token.type) {\n                    case 'space': {\n                        out += this.renderer.space(token);\n                        continue;\n                    }\n                    case 'hr': {\n                        out += this.renderer.hr(token);\n                        continue;\n                    }\n                    case 'heading': {\n                        out += this.renderer.heading(token);\n                        continue;\n                    }\n                    case 'code': {\n                        out += this.renderer.code(token);\n                        continue;\n                    }\n                    case 'table': {\n                        out += this.renderer.table(token);\n                        continue;\n                    }\n                    case 'blockquote': {\n                        out += this.renderer.blockquote(token);\n                        continue;\n                    }\n                    case 'list': {\n                        out += this.renderer.list(token);\n                        continue;\n                    }\n                    case 'html': {\n                        out += this.renderer.html(token);\n                        continue;\n                    }\n                    case 'paragraph': {\n                        out += this.renderer.paragraph(token);\n                        continue;\n                    }\n                    case 'text': {\n                        let textToken = token;\n                        let body = this.renderer.text(textToken);\n                        while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                            textToken = tokens[++i];\n                            body += '\\n' + this.renderer.text(textToken);\n                        }\n                        if (top) {\n                            out += this.renderer.paragraph({\n                                type: 'paragraph',\n                                raw: body,\n                                text: body,\n                                tokens: [{ type: 'text', raw: body, text: body }],\n                            });\n                        }\n                        else {\n                            out += body;\n                        }\n                        continue;\n                    }\n                    default: {\n                        const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                        if (this.options.silent) {\n                            console.error(errMsg);\n                            return '';\n                        }\n                        else {\n                            throw new Error(errMsg);\n                        }\n                    }\n                }\n            }\n            return out;\n        }\n        /**\n         * Parse Inline Tokens\n         */\n        parseInline(tokens, renderer) {\n            renderer = renderer || this.renderer;\n            let out = '';\n            for (let i = 0; i < tokens.length; i++) {\n                const anyToken = tokens[i];\n                // Run any renderer extensions\n                if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                    const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                    if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                        out += ret || '';\n                        continue;\n                    }\n                }\n                const token = anyToken;\n                switch (token.type) {\n                    case 'escape': {\n                        out += renderer.text(token);\n                        break;\n                    }\n                    case 'html': {\n                        out += renderer.html(token);\n                        break;\n                    }\n                    case 'link': {\n                        out += renderer.link(token);\n                        break;\n                    }\n                    case 'image': {\n                        out += renderer.image(token);\n                        break;\n                    }\n                    case 'strong': {\n                        out += renderer.strong(token);\n                        break;\n                    }\n                    case 'em': {\n                        out += renderer.em(token);\n                        break;\n                    }\n                    case 'codespan': {\n                        out += renderer.codespan(token);\n                        break;\n                    }\n                    case 'br': {\n                        out += renderer.br(token);\n                        break;\n                    }\n                    case 'del': {\n                        out += renderer.del(token);\n                        break;\n                    }\n                    case 'text': {\n                        out += renderer.text(token);\n                        break;\n                    }\n                    default: {\n                        const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                        if (this.options.silent) {\n                            console.error(errMsg);\n                            return '';\n                        }\n                        else {\n                            throw new Error(errMsg);\n                        }\n                    }\n                }\n            }\n            return out;\n        }\n    }\n\n    class _Hooks {\n        options;\n        constructor(options) {\n            this.options = options || exports.defaults;\n        }\n        static passThroughHooks = new Set([\n            'preprocess',\n            'postprocess',\n            'processAllTokens',\n        ]);\n        /**\n         * Process markdown before marked\n         */\n        preprocess(markdown) {\n            return markdown;\n        }\n        /**\n         * Process HTML after marked is finished\n         */\n        postprocess(html) {\n            return html;\n        }\n        /**\n         * Process all tokens before walk tokens\n         */\n        processAllTokens(tokens) {\n            return tokens;\n        }\n    }\n\n    class Marked {\n        defaults = _getDefaults();\n        options = this.setOptions;\n        parse = this.parseMarkdown(_Lexer.lex, _Parser.parse);\n        parseInline = this.parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n        Parser = _Parser;\n        Renderer = _Renderer;\n        TextRenderer = _TextRenderer;\n        Lexer = _Lexer;\n        Tokenizer = _Tokenizer;\n        Hooks = _Hooks;\n        constructor(...args) {\n            this.use(...args);\n        }\n        /**\n         * Run callback for every token\n         */\n        walkTokens(tokens, callback) {\n            let values = [];\n            for (const token of tokens) {\n                values = values.concat(callback.call(this, token));\n                switch (token.type) {\n                    case 'table': {\n                        const tableToken = token;\n                        for (const cell of tableToken.header) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                        for (const row of tableToken.rows) {\n                            for (const cell of row) {\n                                values = values.concat(this.walkTokens(cell.tokens, callback));\n                            }\n                        }\n                        break;\n                    }\n                    case 'list': {\n                        const listToken = token;\n                        values = values.concat(this.walkTokens(listToken.items, callback));\n                        break;\n                    }\n                    default: {\n                        const genericToken = token;\n                        if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                                const tokens = genericToken[childTokens].flat(Infinity);\n                                values = values.concat(this.walkTokens(tokens, callback));\n                            });\n                        }\n                        else if (genericToken.tokens) {\n                            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                        }\n                    }\n                }\n            }\n            return values;\n        }\n        use(...args) {\n            const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n            args.forEach((pack) => {\n                // copy options to new object\n                const opts = { ...pack };\n                // set async to true if it was set to true before\n                opts.async = this.defaults.async || opts.async || false;\n                // ==-- Parse \"addon\" extensions --== //\n                if (pack.extensions) {\n                    pack.extensions.forEach((ext) => {\n                        if (!ext.name) {\n                            throw new Error('extension name required');\n                        }\n                        if ('renderer' in ext) { // Renderer extensions\n                            const prevRenderer = extensions.renderers[ext.name];\n                            if (prevRenderer) {\n                                // Replace extension with func to run new extension but fall back if false\n                                extensions.renderers[ext.name] = function (...args) {\n                                    let ret = ext.renderer.apply(this, args);\n                                    if (ret === false) {\n                                        ret = prevRenderer.apply(this, args);\n                                    }\n                                    return ret;\n                                };\n                            }\n                            else {\n                                extensions.renderers[ext.name] = ext.renderer;\n                            }\n                        }\n                        if ('tokenizer' in ext) { // Tokenizer Extensions\n                            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                                throw new Error(\"extension level must be 'block' or 'inline'\");\n                            }\n                            const extLevel = extensions[ext.level];\n                            if (extLevel) {\n                                extLevel.unshift(ext.tokenizer);\n                            }\n                            else {\n                                extensions[ext.level] = [ext.tokenizer];\n                            }\n                            if (ext.start) { // Function to check for start of token\n                                if (ext.level === 'block') {\n                                    if (extensions.startBlock) {\n                                        extensions.startBlock.push(ext.start);\n                                    }\n                                    else {\n                                        extensions.startBlock = [ext.start];\n                                    }\n                                }\n                                else if (ext.level === 'inline') {\n                                    if (extensions.startInline) {\n                                        extensions.startInline.push(ext.start);\n                                    }\n                                    else {\n                                        extensions.startInline = [ext.start];\n                                    }\n                                }\n                            }\n                        }\n                        if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                            extensions.childTokens[ext.name] = ext.childTokens;\n                        }\n                    });\n                    opts.extensions = extensions;\n                }\n                // ==-- Parse \"overwrite\" extensions --== //\n                if (pack.renderer) {\n                    const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                    for (const prop in pack.renderer) {\n                        if (!(prop in renderer)) {\n                            throw new Error(`renderer '${prop}' does not exist`);\n                        }\n                        if (['options', 'parser'].includes(prop)) {\n                            // ignore options property\n                            continue;\n                        }\n                        const rendererProp = prop;\n                        const rendererFunc = pack.renderer[rendererProp];\n                        const prevRenderer = renderer[rendererProp];\n                        // Replace renderer with func to run extension, but fall back if false\n                        renderer[rendererProp] = (...args) => {\n                            let ret = rendererFunc.apply(renderer, args);\n                            if (ret === false) {\n                                ret = prevRenderer.apply(renderer, args);\n                            }\n                            return ret || '';\n                        };\n                    }\n                    opts.renderer = renderer;\n                }\n                if (pack.tokenizer) {\n                    const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                    for (const prop in pack.tokenizer) {\n                        if (!(prop in tokenizer)) {\n                            throw new Error(`tokenizer '${prop}' does not exist`);\n                        }\n                        if (['options', 'rules', 'lexer'].includes(prop)) {\n                            // ignore options, rules, and lexer properties\n                            continue;\n                        }\n                        const tokenizerProp = prop;\n                        const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                        const prevTokenizer = tokenizer[tokenizerProp];\n                        // Replace tokenizer with func to run extension, but fall back if false\n                        // @ts-expect-error cannot type tokenizer function dynamically\n                        tokenizer[tokenizerProp] = (...args) => {\n                            let ret = tokenizerFunc.apply(tokenizer, args);\n                            if (ret === false) {\n                                ret = prevTokenizer.apply(tokenizer, args);\n                            }\n                            return ret;\n                        };\n                    }\n                    opts.tokenizer = tokenizer;\n                }\n                // ==-- Parse Hooks extensions --== //\n                if (pack.hooks) {\n                    const hooks = this.defaults.hooks || new _Hooks();\n                    for (const prop in pack.hooks) {\n                        if (!(prop in hooks)) {\n                            throw new Error(`hook '${prop}' does not exist`);\n                        }\n                        if (prop === 'options') {\n                            // ignore options property\n                            continue;\n                        }\n                        const hooksProp = prop;\n                        const hooksFunc = pack.hooks[hooksProp];\n                        const prevHook = hooks[hooksProp];\n                        if (_Hooks.passThroughHooks.has(prop)) {\n                            // @ts-expect-error cannot type hook function dynamically\n                            hooks[hooksProp] = (arg) => {\n                                if (this.defaults.async) {\n                                    return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                        return prevHook.call(hooks, ret);\n                                    });\n                                }\n                                const ret = hooksFunc.call(hooks, arg);\n                                return prevHook.call(hooks, ret);\n                            };\n                        }\n                        else {\n                            // @ts-expect-error cannot type hook function dynamically\n                            hooks[hooksProp] = (...args) => {\n                                let ret = hooksFunc.apply(hooks, args);\n                                if (ret === false) {\n                                    ret = prevHook.apply(hooks, args);\n                                }\n                                return ret;\n                            };\n                        }\n                    }\n                    opts.hooks = hooks;\n                }\n                // ==-- Parse WalkTokens extensions --== //\n                if (pack.walkTokens) {\n                    const walkTokens = this.defaults.walkTokens;\n                    const packWalktokens = pack.walkTokens;\n                    opts.walkTokens = function (token) {\n                        let values = [];\n                        values.push(packWalktokens.call(this, token));\n                        if (walkTokens) {\n                            values = values.concat(walkTokens.call(this, token));\n                        }\n                        return values;\n                    };\n                }\n                this.defaults = { ...this.defaults, ...opts };\n            });\n            return this;\n        }\n        setOptions(opt) {\n            this.defaults = { ...this.defaults, ...opt };\n            return this;\n        }\n        lexer(src, options) {\n            return _Lexer.lex(src, options ?? this.defaults);\n        }\n        parser(tokens, options) {\n            return _Parser.parse(tokens, options ?? this.defaults);\n        }\n        parseMarkdown(lexer, parser) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const parse = (src, options) => {\n                const origOpt = { ...options };\n                const opt = { ...this.defaults, ...origOpt };\n                const throwError = this.onError(!!opt.silent, !!opt.async);\n                // throw error if an extension set async to true but parse was called with async: false\n                if (this.defaults.async === true && origOpt.async === false) {\n                    return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n                }\n                // throw error in case of non string input\n                if (typeof src === 'undefined' || src === null) {\n                    return throwError(new Error('marked(): input parameter is undefined or null'));\n                }\n                if (typeof src !== 'string') {\n                    return throwError(new Error('marked(): input parameter is of type '\n                        + Object.prototype.toString.call(src) + ', string expected'));\n                }\n                if (opt.hooks) {\n                    opt.hooks.options = opt;\n                }\n                if (opt.async) {\n                    return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                        .then(src => lexer(src, opt))\n                        .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                        .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                        .then(tokens => parser(tokens, opt))\n                        .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                        .catch(throwError);\n                }\n                try {\n                    if (opt.hooks) {\n                        src = opt.hooks.preprocess(src);\n                    }\n                    let tokens = lexer(src, opt);\n                    if (opt.hooks) {\n                        tokens = opt.hooks.processAllTokens(tokens);\n                    }\n                    if (opt.walkTokens) {\n                        this.walkTokens(tokens, opt.walkTokens);\n                    }\n                    let html = parser(tokens, opt);\n                    if (opt.hooks) {\n                        html = opt.hooks.postprocess(html);\n                    }\n                    return html;\n                }\n                catch (e) {\n                    return throwError(e);\n                }\n            };\n            return parse;\n        }\n        onError(silent, async) {\n            return (e) => {\n                e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n                if (silent) {\n                    const msg = '<p>An error occurred:</p><pre>'\n                        + escape$1(e.message + '', true)\n                        + '</pre>';\n                    if (async) {\n                        return Promise.resolve(msg);\n                    }\n                    return msg;\n                }\n                if (async) {\n                    return Promise.reject(e);\n                }\n                throw e;\n            };\n        }\n    }\n\n    const markedInstance = new Marked();\n    function marked(src, opt) {\n        return markedInstance.parse(src, opt);\n    }\n    /**\n     * Sets the default options.\n     *\n     * @param options Hash of options\n     */\n    marked.options =\n        marked.setOptions = function (options) {\n            markedInstance.setOptions(options);\n            marked.defaults = markedInstance.defaults;\n            changeDefaults(marked.defaults);\n            return marked;\n        };\n    /**\n     * Gets the original marked default options.\n     */\n    marked.getDefaults = _getDefaults;\n    marked.defaults = exports.defaults;\n    /**\n     * Use Extension\n     */\n    marked.use = function (...args) {\n        markedInstance.use(...args);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n    /**\n     * Run callback for every token\n     */\n    marked.walkTokens = function (tokens, callback) {\n        return markedInstance.walkTokens(tokens, callback);\n    };\n    /**\n     * Compiles markdown to HTML without enclosing `p` tag.\n     *\n     * @param src String of markdown source to be compiled\n     * @param options Hash of options\n     * @return String of compiled HTML\n     */\n    marked.parseInline = markedInstance.parseInline;\n    /**\n     * Expose\n     */\n    marked.Parser = _Parser;\n    marked.parser = _Parser.parse;\n    marked.Renderer = _Renderer;\n    marked.TextRenderer = _TextRenderer;\n    marked.Lexer = _Lexer;\n    marked.lexer = _Lexer.lex;\n    marked.Tokenizer = _Tokenizer;\n    marked.Hooks = _Hooks;\n    marked.parse = marked;\n    const options = marked.options;\n    const setOptions = marked.setOptions;\n    const use = marked.use;\n    const walkTokens = marked.walkTokens;\n    const parseInline = marked.parseInline;\n    const parse = marked;\n    const parser = _Parser.parse;\n    const lexer = _Lexer.lex;\n\n    exports.Hooks = _Hooks;\n    exports.Lexer = _Lexer;\n    exports.Marked = Marked;\n    exports.Parser = _Parser;\n    exports.Renderer = _Renderer;\n    exports.TextRenderer = _TextRenderer;\n    exports.Tokenizer = _Tokenizer;\n    exports.getDefaults = _getDefaults;\n    exports.lexer = lexer;\n    exports.marked = marked;\n    exports.options = options;\n    exports.parse = parse;\n    exports.parseInline = parseInline;\n    exports.parser = parser;\n    exports.setOptions = setOptions;\n    exports.use = use;\n    exports.walkTokens = walkTokens;\n\n}));\n//# sourceMappingURL=marked.umd.js.map\n","(function(i,n){typeof exports==\"object\"&&typeof module<\"u\"?module.exports=n():typeof define==\"function\"&&define.amd?define(n):(i=typeof globalThis<\"u\"?globalThis:i||self,i.markedAlert=n())})(this,function(){\"use strict\";const i=[{type:\"note\",icon:'<svg class=\"octicon octicon-info mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z\"></path></svg>'},{type:\"tip\",icon:'<svg class=\"octicon octicon-light-bulb mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"></path></svg>'},{type:\"important\",icon:'<svg class=\"octicon octicon-report mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"></path></svg>'},{type:\"warning\",icon:'<svg class=\"octicon octicon-alert mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"></path></svg>'},{type:\"caution\",icon:'<svg class=\"octicon octicon-stop mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z\"></path></svg>'}];function n(a){return a.length?Object.values([...i,...a].reduce((s,r)=>(s[r.type]=r,s),{})):i}function h(a){return`^(?:\\\\[\\\\!${a.toUpperCase()}\\\\])[s]*?\n?`}function f(a){return a.slice(0,1).toUpperCase()+a.slice(1).toLowerCase()}function m(a={}){const{className:s=\"markdown-alert\",variants:r=[]}=a,g=n(r);return{walkTokens(e){var t,p,d,v;if(e.type!==\"blockquote\")return;const o=g.find(({type:c})=>new RegExp(h(c)).test(e.text));if(o){const{type:c,icon:Z,title:w=f(c),titleClassName:x=`${s}-title`}=o;Object.assign(e,{type:\"alert\",meta:{className:s,variant:c,icon:Z,title:w,titleClassName:x}});const l=(t=e.tokens)==null?void 0:t[0],u=(p=l.raw)==null?void 0:p.replace(new RegExp(h(c)),\"\").trim();u?(l.tokens=this.Lexer.lexInline(u),(d=e.tokens)==null||d.splice(0,1,l)):(v=e.tokens)==null||v.shift()}},extensions:[{name:\"alert\",level:\"block\",renderer({meta:e,tokens:o=[]}){let t=`<div class=\"${e.className} ${e.className}-${e.variant}\">\n`;return t+=`<p class=\"${e.titleClassName}\">`,t+=e.icon,t+=e.title,t+=`</p>\n`,t+=this.parser.parse(o),t+=`</div>\n`,t}}]}}return m});\n","import {marked} from \"marked\";\nimport markedAlert from \"marked-alert\";\n\nexport const Repository = new class {\n    private data: Entry[] = [];\n    private pages: Map<string, PageEntry> = new Map();\n    private splash: SplashEntry[] = [];\n\n    public async load(): Promise<void> {\n        this.data = await (fetch('docs.json').then(r => r.json()));\n\n        this.parseEntries(this.data);\n\n        console.log(this.pages);\n    }\n\n    /**\n     * Returns routes that are marked as splash entries.\n     */\n    public get splashEntries(): SplashEntry[] {\n        return this.splash;\n    }\n\n    public get entries(): Entry[] {\n        return this.data;\n    }\n\n    public findPrev(entry: PageEntry): PageEntry | undefined {\n        const keys = Array.from(this.pages.keys());\n        const index = keys.indexOf(entry.path);\n\n        if (index === -1) {\n            return undefined;\n        }\n\n        const prev = keys[index - 1];\n        if (!prev) {\n            return undefined;\n        }\n\n        return this.pages.get(prev);\n    }\n\n    public findNext(entry: PageEntry): PageEntry | undefined {\n        const keys = Array.from(this.pages.keys());\n        const index = keys.indexOf(entry.path);\n\n        if (index === -1) {\n            return undefined;\n        }\n\n        const next = keys[index + 1];\n        if (!next) {\n            return undefined;\n        }\n\n        return this.pages.get(next);\n    }\n\n    public findRoute(route: string): PageEntry | undefined {\n        const parts = route.split('--');\n        const path = parts[0];\n        const hash = parts[1] ?? '';\n\n        console.log('FIND ROUTE:', path);\n\n        const page = this.pages.get(path);\n        if (!page) {\n            return undefined;\n        }\n\n        return page;\n    }\n\n    private findRouteIn(route: string, entries: Entry[]): FileEntry | undefined {\n        for (const entry of entries) {\n            if (entry.type === 'dir') {\n                const found = this.findRouteIn(route, entry.children);\n                if (found) {\n                    return found;\n                }\n            } else if (entry.route.toLowerCase() === route.toLowerCase()) {\n                return entry;\n            }\n        }\n    }\n\n    private parseEntries(entries: Entry[]): void {\n        entries.forEach(entry => {\n            if (entry.type !== 'file') {\n                this.parseEntries(entry.children);\n                return;\n            }\n\n            let src = window.atob(entry.data);\n\n            if (entry.isSplash) {\n                const lines = src.split(/\\r?\\n/);\n                const splash: string[] = [];\n\n                let img = null;\n                let i = 0;\n\n                for (i = 0; i < lines.length; i++) {\n                    if (lines[i].trim() === '') {\n                        continue;\n                    }\n\n                    if (!lines[i].startsWith('|')) {\n                        break;\n                    }\n\n                    const line = lines[i].substring(1).trim();\n\n                    if (line.startsWith('![](')) {\n                        img = line.substring(4, line.length - 1);\n                        continue;\n                    }\n\n                    splash.push(line);\n                }\n\n                if (splash.length > 0) {\n                    this.splash.push({\n                        name: entry.name,\n                        path: entry.route,\n                        html: this.parseMarkdown(splash.join('\\n')),\n                        img: img,\n                    });\n                }\n\n                src = lines.slice(i).join('\\n');\n            }\n\n            this.pages.set(entry.route, this.createPageEntry(entry, src));\n        });\n    }\n\n    private createPageEntry(entry: FileEntry, src: string): PageEntry {\n        const html = this.parseMarkdown(src);\n\n        return {\n            name: entry.name,\n            path: entry.route,\n            html: html,\n        };\n    }\n\n    private parseMarkdown(markdown: string): string {\n        return marked.use(markedAlert()).parse(markdown.trim(), {\n            gfm: true,\n            breaks: false,\n            async: false,\n        });\n    }\n}\n\nexport type Route = {\n    name: string;\n    path: string;\n}\n\nexport type SplashEntry = Route & {\n    html: string;\n    img: string | null;\n}\n\nexport type PageEntry = Route & {\n    html: string;\n};\n\nexport type Entry = PathEntry | FileEntry;\n\nexport interface PathEntry {\n    type: 'dir';\n    name: string;\n    children: Entry[];\n}\n\nexport interface FileEntry {\n    type: 'file';\n    name: string;\n    route: string;\n    data: string;\n    isSplash: boolean;\n    chapters: {name: string, slug: string}[];\n}\n","* {\n    box-sizing: border-box;\n    scrollbar-color: #3f3f3f #212021;\n    scrollbar-width: thin;\n}\n\nbody, html {\n    margin: 0;\n    padding: 0;\n    font-family: 'Lucida Sans Unicode', sans-serif;\n    background-color: #1c1c1c;\n    color: #fff;\n    overflow: hidden;\n}\n\n#background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    width: 100%;\n    height: 100%;\n    background-image: url('images/bg.jpg');\n    background-size: cover;\n    background-position: bottom;\n    background-color: rgba(0, 0, 0, 0.5);\n    filter: blur(16px) saturate(0.5) brightness(0.5);\n}\n\n#content {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    overflow-x: hidden;\n    overflow-y: auto;\n    background: url('images/dot-2x.png') repeat;\n\n    & > .wrapper {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: center;\n        width: 100vw;\n    }\n}\n\nmain {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n    width: 100vw;\n\n    & > .banner {\n        width: 100%;\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n        height: 250px;\n        align-self: flex-start;\n        margin-top: 32px;\n\n        & > div {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-start;\n            align-items: flex-start;\n\n            & > div {\n                color: #b99755;\n                font-size: 18px;\n                font-style: italic;\n                font-family: \"Segoe Script\", handwriting, cursive;\n                margin-left: 32px;\n            }\n        }\n    }\n\n    & > div.cards {\n        display: flex;\n        flex-wrap:wrap;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n        padding: 50px;\n        gap: 50px;\n        border-radius: 4px;\n        background: rgba(187, 155, 88, 0.15);\n        width: 100%;\n\n        .card {\n            background-color: rgba(41, 39, 41, 0.5);\n            padding: 4px;\n            border-radius: 8px;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n\n            color: #faf9fa;\n            text-decoration: none;\n            outline: none;\n            cursor: pointer;\n\n            gap: 8px;\n            border: 2px solid rgba(187, 155, 88, 0.15);\n            transition: all 0.15s ease-in-out;\n            width: 250px;\n            align-self: stretch;\n\n            & > div.card-image {\n                width: 100%;\n                padding: 16px 0;\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n                gap: 8px;\n\n                & > img {\n                    max-width: 128px;\n                    max-height: 128px;\n                    filter: saturate(0.5);\n                    transition: 0.15s ease-in-out;\n                }\n\n                & > h1 {\n                    font-size: 24px;\n                    font-weight: 700;\n                    margin: 0;\n                    padding: 0;\n                    width: 100%;\n                    text-align: center;\n                }\n\n                background: rgba(0, 0, 0, 0.35);\n                border-bottom: 2px solid #b99755;\n            }\n\n            & > div.card-body {\n                display: flex;\n                flex-direction: column;\n                justify-content: flex-start;\n                align-items: center;\n                font-size: 14px;\n                text-align: center;\n                flex-grow: 1;\n                padding: 8px;\n\n                & > .body > p {\n                    margin: 0;\n                    padding: 0;\n                }\n            }\n\n            &:hover {\n                border: 2px solid rgba(187, 155, 88, 1);\n\n                & > div.card-image > img {\n                    filter: saturate(1);\n                }\n            }\n        }\n    }\n\n    section {\n        max-width: 1000px;\n        display: flex;\n        flex-direction: row;\n        flex-wrap: wrap;\n        gap: 32px;\n        justify-content: space-between;\n        align-items: flex-start;\n\n        & > .column {\n            h1 {\n                color: #b99755;\n                text-shadow: 1px 2px 4px rgba(0, 0, 0, .5);\n                font-size: 30px;\n                font-style: italic;\n                font-family: \"Segoe Script\", handwriting, cursive;\n            }\n\n            flex-grow: 1;\n            width: 40%;\n\n            a {\n                display: flex;\n                flex-direction: row;\n                justify-content: flex-start;\n                align-items: center;\n                text-decoration: none;\n                color: #f0eff0;\n                gap: 8px;\n\n                img {\n                    max-height: 76px;\n                    filter: saturate(0.5);\n                }\n\n                &:hover {\n                    img { filter: saturate(1); }\n                    color: #e9c795;\n                }\n            }\n        }\n    }\n}\n","import {Component, Element, h, Host, State} from '@stencil/core';\nimport {PageEntry, Repository} from '../Repository';\n\n@Component({\n    tag: 'x-app',\n    styleUrl: 'x-app.scss',\n})\nexport class XApp {\n\n    @State() private route: PageEntry | null = null;\n\n    @Element() el: HTMLElement;\n\n    async componentWillLoad() {\n        await Repository.load();\n\n        window.addEventListener('hashchange', () => this.loadRoute());\n        this.loadRoute();\n    }\n\n    render() {\n        if (!this.route) {\n            return (\n                <Host>\n                    <div id=\"background\"/>\n                    <div id=\"content\">\n                        <div class=\"wrapper\">\n                            <main>\n                                <div class=\"banner\">\n                                    <x-logo/>\n                                    <div>\n                                        <x-signature/>\n                                        <div>Enhance your Final Fantasy XIV experience.</div>\n                                    </div>\n                                </div>\n                                <div class=\"cards\">\n                                    {Repository.splashEntries.map(e => (\n                                        <a class=\"card\" href={`#${e.path}`}>\n                                            <div class=\"card-image\">\n                                                <img src={e.img ?? ''} alt={\"\"}/>\n                                                <h1>{e.name}</h1>\n                                            </div>\n                                            <div class=\"card-body\">\n                                                <div class=\"body\" innerHTML={e.html}/>\n                                            </div>\n                                        </a>\n                                    ))}\n                                </div>\n\n                                <section>\n                                    <div class=\"column\">\n                                        <h1>A welcoming community</h1>\n                                        <p>Join our Discord server to chat with other users, get help, or to share your\n                                            own creations.</p>\n                                        <a href=\"https://discord.gg/xaEnsuAhmm\" target=\"_blank\">\n                                            <img\n                                                src=\"https://discord.com/api/guilds/1263935915517149298/widget.png?style=banner2\"/>\n                                        </a>\n                                        <h1>Support the development</h1>\n                                        <p>\n                                            Umbra is a free project. If you enjoy using it, please consider supporting\n                                            the development.\n                                        </p>\n                                        <a href='https://ko-fi.com/L4L4XIDQI' target='_blank'>\n                                            <img src='https://storage.ko-fi.com/cdn/kofi6.png?v=3'\n                                                 alt='Buy Me a Coffee at ko-fi.com'\n                                                 style={{height: '40px', backgroundColor: '#f0c0a3'}}\n                                            />\n                                        </a>\n                                    </div>\n                                    <div class=\"column\">\n                                        <h1>Open Source</h1>\n                                        <p>\n                                            Our code is available on GitHub. If you're a developer, feel free to\n                                            contribute!\n                                        </p>\n                                        <a href=\"https://github.com/una-xiv/umbra\">\n                                            <x-github-link/>\n                                        </a>\n                                        <h1>Contributors</h1>\n                                        <p>\n                                            Special thanks to the following contributors for their work on Umbra.\n                                        </p>\n                                        <x-github-contributors/>\n                                    </div>\n                                </section>\n                            </main>\n                        </div>\n                        <x-sitemap/>\n                    </div>\n                </Host>\n            );\n        }\n\n        return (\n            <Host>\n                <div id=\"background\"/>\n                <div id=\"content\">\n                    <x-navbar/>\n                    <div class=\"wrapper\">\n                        <x-page entry={this.route}/>\n                    </div>\n                    <x-sitemap/>\n                </div>\n            </Host>\n        );\n    }\n\n    private loadRoute(): void {\n        const hash = document.location.hash;\n\n        if (!hash) {\n            this.route = null;\n        }\n\n        this.route = Repository.findRoute(hash.substring(1)) || null;\n\n        if (hash.indexOf('--') === -1) {\n            setTimeout(() => {\n                this.el.querySelector(\"#content\")!.scrollTop = 0;\n            }, 100);\n        }\n    }\n}\n",":host {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 8px;\n    border-radius: 6px;\n    font-size: 14px;\n    font-weight: 500;\n    text-shadow: 0 0 4px #000;\n    color: #cac9ca;\n    background-color: #3a393a;\n    background-image: linear-gradient(to top, #212021 0%, #3a393a 100%);\n    border: 2px solid #3a393a;\n    user-select: none;\n    cursor: pointer;\n}\n\n:host(:hover) {\n    background-color: #3a393a;\n    background-image: linear-gradient(to top, #2f2e2f 0%, #3f3e3f 100%);\n    border: 2px solid #4f4f4f;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, .25);\n}\n\n:host(:active) {\n    background-color: #3f3e3f;\n    background-image: linear-gradient(to top, #3f3e3f 0%, #2f2e2f 100%);\n    border: 2px solid #4f4f4f;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, .5);\n}\n","import {Component, Element, h, Prop} from \"@stencil/core\";\n\n@Component({\n    tag: 'x-button',\n    styleUrl: 'x-button.scss',\n    shadow: true,\n})\nexport class XButton {\n    @Prop({reflect: true}) href: string = '';\n\n    @Element() el: HTMLElement;\n\n    componentDidLoad()\n    {\n        this.el.addEventListener('click', () => {\n            if (this.href) {\n                document.location = `#${this.href}`;\n            }\n        });\n    }\n\n    render() {\n        return (\n            <slot/>\n        );\n    }\n}\n","﻿:host {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 4px;\n}\n\na {\n    text-decoration: none;\n}\n\n.user {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    border: 2px solid #1a1a1a;\n    background-image: var(--avatar);\n    background-position: center;\n    background-size: cover;\n}\n","﻿import {Component, h, Host, State} from \"@stencil/core\";\n\n@Component({\n    tag: 'x-github-contributors',\n    styleUrl: 'x-github-contributors.scss',\n    shadow: true,\n})\nexport class XGithubContributors {\n\n    @State() private contributors: any[] = [];\n\n    async componentDidLoad() {\n        this.contributors = await fetch('https://api.github.com/repos/una-xiv/umbra/contributors').then(r => r.json());\n    }\n\n    render() {\n        return (\n            <Host>\n                {this.contributors.map(c => (\n                    <a href={c.html_url} target=\"_blank\" title={c.login}>\n                        <div class=\"user\" style={{'--avatar': `url(${c.avatar_url})`}}/>\n                    </a>\n                ))}\n            </Host>\n        );\n    }\n}\n",":host {\n    display: inline-flex;\n    flex-direction: row;\n    height: 76px;\n    gap: 8px;\n    background: rgba(155, 145, 115, .65);\n    padding: 8px;\n}\n\n:host(:hover) {\n    background: rgba(135, 115, 85, 1);\n}\n\nimg {\n    max-height: 60px;\n}\n\nmain {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 4px;\n\n    div {\n        color: #ffffff;\n        text-decoration: none;\n        font-size: 12px;\n        padding-right: 8px;\n    }\n\n    footer {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        align-items: center;\n        gap: 10px;\n        font-size: 10px;\n        color: #bfbebf;\n    }\n}\n","import {Component, h, Host, State} from \"@stencil/core\";\n\n@Component({\n    tag: 'x-github-link',\n    styleUrl: 'x-github-link.scss',\n    shadow: true,\n})\nexport class XGithubLink {\n    @State() private stargazers: number = 0;\n    @State() private forks: number = 0;\n\n    async componentWillLoad() {\n        const data = await fetch('https://api.github.com/repos/una-xiv/umbra').then(r => r.json());\n        this.stargazers = data?.stargazers_count ?? 0;\n        this.forks = data?.forks_count ?? 0;\n    }\n\n    render() {\n        return (\n            <Host>\n                <img src=\"images/github-mark-white.png\"/>\n                <main>\n                    <div>\n                        https://github.com/una-xiv/umbra\n                    </div>\n                    <footer>\n                        <div>{this.stargazers} stars,</div>\n                        <div>{this.forks} forks.</div>\n                    </footer>\n                </main>\n            </Host>\n        );\n    }\n}\n",":host {\n    display: block;\n}\n\nsvg {\n    object-fit: scale-down;\n}\n","import {Component, h, Prop} from \"@stencil/core\";\n\n@Component({\n    tag: 'x-logo',\n    styleUrl: 'x-logo.scss',\n    shadow: true,\n})\nexport class XLogo {\n\n    @Prop() size: number = 200;\n\n    public render() {\n        return (\n            <svg viewBox=\"0 0 250 220\" preserveAspectRatio=\"xMidYMid meet\" class=\"css-1af7stb\"\n                 id=\"bedechag\"\n                 style={{height: `${this.size}px`}}\n            >\n                <defs id=\"SvgjsDefs1001\">\n                    <linearGradient id=\"SvgjsLinearGradient1013\">\n                        <stop id=\"SvgjsStop1014\" stop-color=\"#905e26\" offset=\"0\"></stop>\n                        <stop id=\"SvgjsStop1015\" stop-color=\"#f5ec9b\" offset=\"0.5\"></stop>\n                        <stop id=\"SvgjsStop1016\" stop-color=\"#905e26\" offset=\"1\"></stop>\n                    </linearGradient>\n                    <linearGradient id=\"SvgjsLinearGradient1017\">\n                        <stop id=\"SvgjsStop1018\" stop-color=\"#905e26\" offset=\"0\"></stop>\n                        <stop id=\"SvgjsStop1019\" stop-color=\"#f5ec9b\" offset=\"0.5\"></stop>\n                        <stop id=\"SvgjsStop1020\" stop-color=\"#905e26\" offset=\"1\"></stop>\n                    </linearGradient>\n                    <linearGradient id=\"SvgjsLinearGradient1021\">\n                        <stop id=\"SvgjsStop1022\" stop-color=\"#905e26\" offset=\"0\"></stop>\n                        <stop id=\"SvgjsStop1023\" stop-color=\"#f5ec9b\" offset=\"0.5\"></stop>\n                        <stop id=\"SvgjsStop1024\" stop-color=\"#905e26\" offset=\"1\"></stop>\n                    </linearGradient>\n                </defs>\n                <g id=\"SvgjsG1007\"\n                   transform=\"matrix(1.132131535723742,0,0,1.132131535723742,20.000395704467625,0)\"\n                   fill=\"url(#SvgjsLinearGradient1013)\">\n                    <path xmlns=\"http://www.w3.org/2000/svg\"\n                          d=\"M17.914 148.907zM22.657 154.94a90.586 90.586 0 0 0 5.861 6.251c6.914 6.805 15.159 12.525 24.004 16.851 3.259 1.526 6.265 3.107 9.787 4.468.88.338 1.779.7 2.724 1.026.953.302 1.941.604 2.974.903 1.027.321 2.122.549 3.267.786 1.146.23 2.336.493 3.614.624a91.24 91.24 0 0 1-18.434-5.99 93.833 93.833 0 0 1-16.873-9.842c-10.548-7.727-19.57-17.648-26.16-28.989-.272-.339-.685-.985-1.18-1.808l-.796-1.348-.803-1.551c-.534-1.076-1.149-2.168-1.62-3.226a71.281 71.281 0 0 0-1.326-2.748c2.048 5.101 4.412 9.563 7.059 13.806a93.473 93.473 0 0 0 3.869 5.697c-.192-.259-.392-.511-.583-.771a95.012 95.012 0 0 0 4.6 5.841l.016.02zM18.039 149.078l-.125-.17.125.17zM1.335 106.042l-.483-3.875c.256 2.365.553 5.008 1.096 7.654l-.327-1.879a23.961 23.961 0 0 1-.286-1.9zM85.812 185.575c6.652.673 13.628.472 20.461-.609 6.837-1.077 13.524-2.987 19.741-5.449-11.45 4.503-23.602 6.506-35.49 6.171-1.591-.025-3.159 0-4.712-.113z\"></path>\n                    <path xmlns=\"http://www.w3.org/2000/svg\"\n                          d=\"M46.426 171.967l-.259-.165c.087.055.172.111.259.165zM46.167 171.802zM43.653 170.135zM56.077 177.284A83.837 83.837 0 0 0 73.2 183.1c-9.688-2.21-18.805-6.109-26.774-11.133 3.06 1.947 6.277 3.749 9.651 5.317zM177.002 107.094c.098-1.58.296-3.238.346-4.027.594-5.071.77-9.401.745-13.745-.11-.783-.425-2.25-.55-3.918-.153-1.672-.378-3.309-.568-4.924-.289-1.601-.538-3.186-.854-4.74 2.275 11.617 2.237 23.279.144 34.282a94.97 94.97 0 0 1 .737-2.928z\"></path>\n                    <path xmlns=\"http://www.w3.org/2000/svg\"\n                          d=\"M.887 83.482c.848-6.9 2.653-13.626 4.37-18.107l-.695 3.28c.429-.961 1.122-3.194 2.067-5.557l.682-1.802.753-1.747c.5-1.131.92-2.203 1.363-3.025-.303.771-.595 1.602-.947 2.436-.345.837-.732 1.687-1.101 2.542l1.514-3.409A111.863 111.863 0 0 0 4.954 69.8c-1.133 4.352-2.029 8.926-2.511 13.032-.14 1.024-.189 2.024-.28 2.978-.067.954-.183 1.864-.192 2.724-.042 1.719-.1 3.224-.071 4.428.105 2.409.25 3.61.459 2.939.411-1.333.403-8.188 1.837-16.767.767-4.276 1.868-8.966 3.362-13.561 1.483-4.599 3.427-9.058 5.44-12.992l-.592 1.292-.545 1.331-1.116 2.691-1.024 2.78-.521 1.402c-.153.476-.308.954-.461 1.434-1.32 3.807-2.307 7.816-3.167 11.857l-.559 3.052c-.205 1.014-.292 2.046-.444 3.067-.318 2.041-.434 4.097-.611 6.129-.199 4.074-.239 8.098.13 11.946-.015-.914-.03-1.726-.017-2.512l.115-2.355c.048-.809.039-1.667.115-2.65.07-.983.134-2.091.19-3.402.391-6.608 1.572-13.15 3.408-19.481 1.75-6.358 3.814-11.957 6.889-17.03l.801-1.526c.542-1.024.993-2.034 1.566-3.064.653-1.13 1.278-1.976 1.784-2.751.521-.767.963-1.441 1.469-2.095l3.682-5.082c.075-.009-.022.185-.2.473a28.962 28.962 0 0 1 1.959-2.49c.755-.875 1.488-1.803 2.109-2.569.146-.007.288-.011.623-.251 8.65-9.197 19.295-16.692 31.291-21.417l2.667-1.039 2.7-.899 1.343-.448 1.36-.38 2.71-.753c1.55-.373 3.12-.751 4.721-1.091l2.437-.426c.819-.141 1.642-.3 2.484-.378 1.674-.201 3.134-.625 3.921-.729 4.369-.249 8.73-.199 13.849.216.397.007 1.015.043 1.732.082.717.041 1.537.061 2.332.134.932.21 1.927.418 2.971.621 6.369.988 12.527 2.754 18.386 5.103l-.007-.028 2.244.894 2.29 1.058c1.571.684 3.11 1.559 4.7 2.383.798.407 1.554.904 2.338 1.354.77.474 1.576.894 2.32 1.412 1.508 1.002 3.037 1.961 4.446 3.032a99.912 99.912 0 0 1 6.6 5.198c.046.042.094.081.14.122l.042.038 1.457 1.322 1.394 1.391 1.395 1.392c.462.467.89.967 1.337 1.449-.216-.35-.208-.491-.2-.63-.689-.66-1.504-1.441-2.309-2.21 1.343 1.222 2.515 2.327 3.477 3.229.371.474.776.94 1.16 1.449l1.186 1.566 1.261 1.629 1.255 1.752c2.226 2.838 4.191 5.874 6.057 8.97.864 1.588 1.817 3.131 2.586 4.774l1.213 2.436 1.092 2.497c.314.533.192.022.231-.068 1.225 2.962 2.21 6.042 3.102 9.146a88.212 88.212 0 0 1 3.408 17.211c.225 1.378.321 2.772.52 4.153l-.123 2.924c-.001 1.103.057 2.206.01 3.311l-.128 3.326c-.016.75-.124 1.569-.187 2.459-.084.888-.128 1.846-.256 2.856l-.412 3.192c-.132 1.119-.387 2.269-.583 3.471a90.635 90.635 0 0 1-4.312 15.482c-.242.826-.427 1.486-.592 1.855-.627 1.501-1.296 2.954-1.942 4.385-.723 1.394-1.386 2.788-2.127 4.108a86.09 86.09 0 0 1-7.949 12.379c-.336.439-.649.885-.987 1.297l-.998 1.206c-.66.779-1.25 1.558-1.876 2.234-1.251 1.352-2.301 2.606-3.286 3.549-1.128 1.178-1.027 1.233-.246.665a35.07 35.07 0 0 0 1.608-1.262l2.122-1.914c.776-.677 1.519-1.441 2.235-2.161.708-.725 1.416-1.386 1.962-1.984 1.101-1.191 1.824-1.926 1.67-1.599-1.777 3.345-5.013 7.471-9.743 12.035-2.413 2.227-5.128 4.647-8.339 6.98-1.566 1.221-3.307 2.338-5.082 3.558-1.834 1.123-3.708 2.353-5.757 3.445-4.484 2.442 3.365-1.475 3.577-1.512a22.87 22.87 0 0 1-2.377 1.64c-1.478.786-2.943 1.597-4.474 2.273-.895.411-1.774.855-2.679 1.239l-2.729 1.122 1.444-.568c2.952-1.173 5.711-2.555 8.202-3.922-.936.566-1.96 1.221-3.082 1.812-1.203.622-2.448 1.302-3.697 1.909l-3.625 1.686c12.968-4.711 24.885-12.507 34.319-22.67 4.723-5.066 8.935-10.631 12.369-16.651a93.904 93.904 0 0 0 8.288-18.999c-3.154 9.93-8.071 19.052-13.981 26.765 10.744-14.507 17.15-32.293 17.999-50.636-.001 1.011-.101 2.018-.168 3.025-.083 1.007-.123 2.018-.241 3.022-.257 2.005-.441 4.021-.827 6.009-.624 4-1.636 7.931-2.782 11.815 2.262-7.021 3.613-14.424 4.145-21.869.554-7.451.092-14.947-1.057-22.211 1.974 9.622 2.301 20.524.619 31.298 1.182-6.949 1.482-14.112 1.028-21.214-.102-2.713-.422-5.407-.685-7.901-.377-2.476-.662-4.762-1.027-6.611 1.445 6.826 2.015 12.648 2.293 18.136-.267-11.977-2.748-24.112-7.62-35.511 2.659 6.191 4.842 12.851 6.175 19.698 1.34 6.84 1.897 13.838 1.58 20.57-.015-.788.018-1.575-.028-2.366l-.107-2.391c.287 10.85-1.384 21.604-4.696 31.717-1.662 5.056-3.715 9.969-6.2 14.644a95.521 95.521 0 0 1-8.56 13.316c3.673-4.29 7.551-10.354 10.646-17.015 3.081-6.675 5.368-13.894 6.941-20.199-2.314 11.322-6.907 22.494-13.571 32.471-6.646 9.985-15.351 18.764-25.423 25.502-10.06 6.759-21.474 11.437-33.187 13.748a94.608 94.608 0 0 1-17.657 1.809 94.462 94.462 0 0 1-17.361-1.515l3.005.571c1.002.19 2.018.295 3.026.445 2.016.324 4.055.446 6.087.633 4.073.229 8.168.306 12.25-.005 4.089-.217 8.152-.827 12.196-1.572 2.006-.456 4.036-.829 6.017-1.414.994-.278 2-.521 2.987-.83l2.955-.958c-1.492.462-3.062 1.074-4.739 1.523l-2.101.618a91.772 91.772 0 0 0 12.91-4.496 89.46 89.46 0 0 0 5.651-2.705 96.653 96.653 0 0 1-10.714 4.872 98.407 98.407 0 0 1-21.66 5.382c-1.11.176-2.122.231-3.029.326l-2.428.24c-1.429.113-2.484.164-3.222.245-1.477.147-1.687.284-1.099.397.587.113 1.971.203 3.673.251 1.697-.01 3.71-.101 5.541-.268 18.397-1.887 35.288-9.107 48.824-19.916 13.545-10.811 23.919-25.172 29.701-41.467.363-.946.642-1.922.944-2.89.293-.971.617-1.932.882-2.912.491-1.97 1.072-3.917 1.448-5.917l.619-2.985.487-3.012.241-1.507.172-1.517.342-3.034c.698-8.114.422-16.315-.812-24.363-.66-4.554-1.82-9.961-3.315-14.777l-1.15-3.484c-.4-1.107-.825-2.151-1.203-3.133l-.557-1.415-.571-1.271-.981-2.124c-3.134-6.359-7.072-12.424-11.682-18.065-4.605-5.643-9.896-10.868-15.861-15.418l-2.244-1.703-2.327-1.608-1.166-.806-1.203-.756-2.417-1.508c-3.295-1.904-6.67-3.739-10.228-5.261-3.521-1.598-7.206-2.895-10.957-4.055-1.895-.52-3.781-1.1-5.724-1.499-.968-.209-1.928-.463-2.907-.638l-2.944-.521C100.363.01 93.04-.285 85.724.265 78.412.83 71.069 2.218 64.028 4.614l-2.635.913c-.881.297-1.73.682-2.597 1.019-.858.359-1.735.673-2.577 1.069l-2.532 1.173c-.852.376-1.675.808-2.496 1.245l-2.469 1.297-2.402 1.412c-.8.472-1.606.933-2.372 1.458l-2.324 1.528c-.782.497-1.506 1.078-2.261 1.612-.741.554-1.51 1.07-2.226 1.654l-2.157 1.737c-.729.565-1.417 1.178-2.103 1.792l-2.063 1.83-1.971 1.919c-.656.639-1.319 1.271-1.93 1.951-5.031 5.298-9.451 11.078-13.066 17.194A99.518 99.518 0 0 0 5.18 64.379C.805 77.299-.45 90.402.134 102.237c-.126-4.872-.147-11.859.753-18.755zm141.132 90.446a96.807 96.807 0 0 0 8.765-6.389c-2.84 2.339-5.758 4.499-8.765 6.389zm40.217-54.282c-.299.901-.552 1.791-.882 2.641l-.957 2.523-.466 1.248-.513 1.231a108.54 108.54 0 0 0-.997 2.501 97.307 97.307 0 0 1-6.587 13.35c-2.521 4.275-5.443 8.281-8.565 12.04-1.542 1.899-3.222 3.66-4.874 5.421l-2.581 2.523c-.847.848-1.774 1.604-2.652 2.404-.736.64-1.478 1.266-2.225 1.882a90.696 90.696 0 0 0 7.896-7.312 89.808 89.808 0 0 1-11.689 10.188c-1.036.722-2.037 1.496-3.113 2.176l-3.247 2.069-3.43 1.949c-1.167.648-2.399 1.224-3.634 1.855a74.206 74.206 0 0 1 2.685-1.508c1.021-.567 2.092-1.237 3.138-1.85 1.054-.601 2.012-1.261 2.808-1.813.796-.552 1.42-1.01 1.745-1.306-.464.315-.936.617-1.406.924a92.477 92.477 0 0 0 1.507-1.015c-.021.023-.065.059-.101.091 10.932-7.466 20.245-17.277 27.223-28.462 7.009-11.175 11.57-23.781 13.46-36.601-.41 5.142-1.352 9.248-2.543 12.851zm-6.654-65.352zm-8.448-12.698a92.37 92.37 0 0 1 7.773 14.352c.25.549.486 1.106.719 1.664 4.963 12.154 7.221 25.192 6.89 38.036.084-4.25-.198-8.498-.669-12.71-.533-4.854-1.518-9.65-2.824-14.341-2.562-9.407-6.723-18.323-12.005-26.451.485.67.996 1.396 1.525 2.166a32.826 32.826 0 0 1 1.59 2.463l-.638-1.109-.689-1.079-1.378-2.156c-.938-1.424-1.955-2.796-2.934-4.192-1.062-1.334-2.069-2.712-3.174-4.011-.836-.953-1.637-1.938-2.485-2.879 2.992 3.155 5.801 6.54 8.299 10.247zM96.886 1.152c1.467.078 2.937.221 4.407.331 1.204.101 2.402.279 3.588.413.356.015.732.039 1.204.092.471.065 1.034.186 1.769.354 5.469.912 10.459 2.283 14.001 3.699 6.798 2.573 13.123 5.774 18.86 9.471 5.739 3.69 10.889 7.887 15.246 12.471 2.008 2.179 1.422 1.704.315.646l1.662 1.764c-.736-.734-1.459-1.478-2.206-2.196l-2.301-2.09c.56.49 1.918 1.663 2.845 2.522-7.389-7.539-16.026-13.799-25.375-18.404-9.356-4.603-19.431-7.446-29.502-8.581 1.618.18 2.412.22 3.168.24-1.085-.127-2.173-.301-3.274-.401-1.479-.097-2.955-.229-4.423-.301l-4.36-.103c1.444-.001 2.907.039 4.376.073z\"></path>\n                    <path xmlns=\"http://www.w3.org/2000/svg\"\n                          d=\"M115.942 184.69l.426-.125c-.446.12-.885.252-1.334.366.304-.076.609-.15.908-.241zM160.424 146.151c4.235-5.587 7.977-12.263 10.366-18.014l-.029.006c-6.061 14.322-15.892 26.66-28.16 35.744a159.12 159.12 0 0 0 6.418-4.703c2.698-2.82 7.213-7.406 11.405-13.033zM35.35 162.846c7.172 6.412 15.821 11.992 25.448 15.751 3.754 1.413 7.585 2.651 11.503 3.523 1.944.502 3.929.812 5.899 1.181.987.175 1.987.272 2.979.412.994.129 1.986.275 2.987.333-4.519-.501-9.005-1.251-13.372-2.44-4.364-1.185-8.642-2.65-12.769-4.449a97.4 97.4 0 0 1-11.894-6.314c-3.786-2.408-7.376-5.097-10.781-7.997zM123.877 174.277l-2.219.871-2.266.756c-1.5.54-3.047.944-4.59 1.373 1.551-.39 3.111-.754 4.624-1.254l2.283-.698 2.23-.815c-.086-.044-.594.055-.062-.233zM97.683 179.965c-1.16.099-2.326.09-3.494.102-1.168.014-2.338.039-3.509-.038l1.576.148c.482.031.916.068 1.295.113 1.381-.118 2.752-.151 4.132-.325zM51.441 169.209c1.341.787 2.765 1.48 4.178 2.244.354.194.996.415 1.801.709-1.721-.739-3.37-1.655-5.046-2.505-.83-.441-1.629-.935-2.443-1.395-.812-.464-1.621-.927-2.389-1.445l.937.626.977.584 1.985 1.182z\"></path>\n                </g>\n                <g id=\"SvgjsG1008\"\n                   transform=\"matrix(3.63989373183179,0,0,3.63989373183179,74.9317177109937,-52.85173032900657)\"\n                   fill=\"url(#SvgjsLinearGradient1017)\">\n                    <path\n                        d=\"M20.58 31.92 l0 -0.12 c0.06 -0.18 0 -0.42 0.06 -0.54 c0.12 -0.18 0.06 -0.48 0.3 -0.6 c0.06 0 0.06 -0.12 0.06 -0.18 c0.06 -0.12 0 -0.36 0.18 -0.48 c0.06 0 0 -0.06 0 -0.12 c0.06 -0.06 0.12 -0.12 0.12 -0.18 c0.06 -0.12 0.12 -0.24 0.12 -0.36 s0.06 -0.18 0.18 -0.24 s0.06 -0.18 0.06 -0.24 c0 -0.12 0 -0.24 0.18 -0.24 l0 -0.12 c0.06 -0.12 0.12 -0.3 0.18 -0.42 l0.36 -0.72 c0.06 -0.06 0.06 -0.12 0.12 -0.18 c0.18 -0.06 0.18 -0.24 0.24 -0.42 c0 -0.06 0.06 -0.12 0.12 -0.24 c0 -0.06 0.18 -0.36 0.24 -0.48 c0 -0.06 0.12 -0.12 0.18 -0.12 l0.12 -0.12 c0.06 -0.12 0.06 -0.24 0.12 -0.36 c0 -0.06 0.06 -0.12 0.12 -0.18 c0.06 -0.12 0.18 -0.18 0.24 -0.24 c0.12 -0.06 0.24 -0.06 0.36 -0.06 c0.12 0.06 0.24 0.18 0.3 0.3 c0.18 0.3 0.42 0.42 0.72 0.6 c0.12 0.06 0.36 0.12 0.48 0.24 c0.12 0.06 0.12 0.18 0.18 0.24 c0.12 0.18 0.24 0.42 0.36 0.54 c0.12 0.18 0.3 0.36 0.42 0.54 c0.18 0.12 0.3 0.24 0.48 0.36 c0.36 0.18 0.42 0.48 0.12 0.84 c-0.06 0.06 -0.06 0.12 -0.12 0.24 l-0.18 0.36 l0 0.06 c-0.12 0.18 -0.12 0.42 -0.3 0.54 l0 0.12 c0 0.12 -0.06 0.12 -0.12 0.18 c0 0.06 -0.06 0.06 -0.06 0.12 c0 0.24 -0.12 0.42 -0.3 0.6 l0 0.12 c-0.06 0.24 -0.12 0.48 -0.3 0.66 c-0.24 0.42 -0.42 0.84 -0.6 1.26 c0 0.12 -0.12 0.3 -0.18 0.42 c-0.06 0.06 -0.06 0.06 -0.06 0.12 c0 0.24 -0.12 0.42 -0.24 0.6 c-0.06 0.12 -0.06 0.24 -0.18 0.3 l0 0.06 c0 0.12 0 0.24 0.06 0.3 c-0.12 0.06 -0.18 0.06 -0.24 0.06 c0 0.18 -0.06 0.3 -0.06 0.48 c-0.18 0 -0.18 0.12 -0.18 0.3 s0 0.42 -0.06 0.6 c-0.18 0.36 -0.18 0.78 -0.36 1.08 c-0.06 0.18 -0.12 0.3 -0.12 0.48 c0 0.06 0.06 0.12 -0.06 0.12 c-0.06 0 -0.06 0.06 -0.06 0.06 c-0.12 0.36 -0.24 0.72 -0.24 1.14 c0 0.06 -0.06 0.12 -0.12 0.18 l0 0.12 c0 0.12 0 0.3 -0.06 0.48 l0 0.06 c-0.24 0.06 -0.12 0.24 -0.12 0.42 c-0.06 0.24 -0.12 0.48 -0.18 0.66 c-0.06 0.24 -0.12 0.48 -0.24 0.72 c0.06 0 0.06 0 0.06 0.06 l-0.12 0 l0 0.36 c0 0.06 -0.06 0.12 -0.06 0.18 s-0.06 0.06 -0.06 0.06 c0 0.3 -0.06 0.66 -0.12 0.96 l0 0.06 c-0.24 0.12 -0.06 0.36 -0.12 0.6 c-0.06 0.06 0 0.12 -0.06 0.18 c0 0.06 -0.12 0.12 -0.18 0.18 l0 0.6 c0 0.06 0 0.12 -0.06 0.12 c-0.12 0.18 -0.12 0.36 -0.12 0.54 c0 0.12 0.06 0.18 -0.06 0.3 c-0.06 0 -0.06 0.06 -0.06 0.18 c-0.06 0.18 0.06 0.3 -0.06 0.48 c-0.06 0 0 0.12 0 0.18 c0 0.12 0.06 0.18 -0.06 0.24 l0 0.54 l-0.06 0 c-0.18 0.12 -0.06 0.3 -0.06 0.48 s-0.12 0.24 -0.12 0.36 c-0.06 0.06 -0.06 0.06 -0.06 0.12 c0 0.18 0 0.42 -0.06 0.66 c0 0.06 0 0.18 -0.06 0.24 c-0.06 0.24 0.06 0.54 -0.12 0.78 l-0.06 0 c0 0.12 0.06 0.18 0.06 0.3 c0 0.06 0 0.12 -0.06 0.18 c-0.12 0.12 -0.12 0.3 -0.12 0.42 c0.06 0.12 0.12 0.24 -0.06 0.36 l0 0.24 s0 0.24 -0.06 0.3 s-0.06 0.12 -0.06 0.24 s0.06 0.18 0.06 0.3 c-0.06 0.12 -0.06 0.18 -0.12 0.24 c0 0.18 0 0.48 -0.06 0.66 c-0.18 0.36 -0.06 0.72 -0.18 1.02 c-0.06 0.06 -0.06 0.12 -0.06 0.18 l0 0.12 c-0.18 0.12 -0.12 0.24 -0.12 0.42 c0 0.12 0.12 0.24 -0.06 0.3 c0.06 0.48 -0.12 0.96 -0.3 1.5 c0.06 0.06 0.12 0.18 0 0.36 c0 0.06 0.06 0.12 0.06 0.18 s-0.06 0.18 -0.06 0.3 s-0.06 0.18 -0.06 0.3 s0 0.3 -0.06 0.48 c0 0.06 -0.06 0.18 -0.06 0.24 l0 0.66 l-0.06 0 c-0.18 0.18 0 0.36 -0.06 0.48 c0 0.24 -0.06 0.54 -0.06 0.78 l0 0.06 c-0.06 0.18 -0.06 0.36 -0.06 0.54 l0 0.66 c0 0.06 0.06 0.12 0.12 0.18 s0.06 0.12 0.06 0.24 c-0.06 0.3 -0.3 0.3 -0.48 0.3 c-0.42 -0.06 -0.78 -0.06 -1.2 -0.12 c-0.54 -0.12 -1.08 -0.42 -1.5 -0.78 c-0.3 -0.3 -0.42 -0.72 -0.42 -1.14 l0 -0.18 c-0.06 -0.24 -0.12 -0.54 -0.12 -0.78 c-0.06 -0.3 -0.06 -0.48 -0.06 -0.78 c-0.06 -0.06 0 -0.12 0 -0.18 l0 -0.36 c0 0 -0.06 -0.06 -0.06 -0.12 c0 -0.24 0.06 -0.42 0.06 -0.66 c0 -0.18 -0.06 -0.36 -0.06 -0.54 l0 -0.12 c0.12 -0.18 0 -0.36 0 -0.6 c0 -0.18 0.06 -0.3 0.06 -0.48 c0 -0.06 0.06 -0.12 0.12 -0.24 c-0.12 -0.36 -0.12 -0.72 -0.06 -1.14 c0 -0.18 0.06 -0.36 0 -0.54 c0 0 0 -0.12 0.06 -0.12 c0.12 -0.12 0.06 -0.24 0.06 -0.36 c-0.06 -0.12 -0.06 -0.18 -0.06 -0.3 c0 -0.24 0 -0.42 0.06 -0.66 c0.06 -0.3 -0.06 -0.66 0 -0.96 c0.06 -0.18 0.06 -0.3 0 -0.48 c0 -0.06 0.06 -0.18 0.12 -0.3 c0.06 -0.06 0.12 -0.18 0.06 -0.3 s-0.12 -0.24 0.06 -0.36 c0 -0.06 -0.06 -0.18 -0.06 -0.3 c-0.12 0.06 -0.18 0.06 -0.24 0.12 s-0.12 0.12 -0.12 0.18 c0 0.18 -0.06 0.3 -0.24 0.42 c-0.12 0.12 -0.24 0.3 -0.3 0.54 c0 0.12 0 0.18 -0.12 0.18 c-0.06 0.06 -0.12 0.12 -0.12 0.18 c-0.06 0.12 -0.18 0.18 -0.18 0.36 c-0.06 0.12 -0.18 0.18 -0.3 0.24 c-0.06 0.12 -0.06 0.3 -0.24 0.36 c-0.06 0 -0.06 0.12 -0.06 0.18 c0 0.18 -0.06 0.24 -0.24 0.24 c0.06 0.18 -0.12 0.24 -0.24 0.36 c-0.06 0 -0.06 0.06 -0.06 0.12 c-0.06 0.12 -0.06 0.3 -0.24 0.36 c0 0 -0.06 0 -0.06 0.06 c0 0.18 -0.12 0.24 -0.3 0.24 c-0.06 0.12 -0.18 0.24 -0.24 0.36 c-0.12 0.12 -0.36 0.12 -0.3 0.42 c-0.06 0 -0.12 0 -0.18 0.06 c0 0.24 -0.06 0.3 -0.36 0.42 l-0.06 0.06 c0 0.06 -0.06 0.18 -0.12 0.18 c-0.24 0 -0.18 0.3 -0.36 0.36 c-0.06 0.06 -0.06 0.12 -0.12 0.12 c-0.18 0.06 -0.3 0.18 -0.48 0.36 c-0.06 0.06 -0.24 0.12 -0.3 0.18 c-0.18 0.18 -0.42 0.18 -0.6 0.3 c-0.06 0 -0.12 0.06 -0.18 0.12 c-0.12 0.06 -0.18 0.06 -0.3 0.12 s-0.3 0.06 -0.42 0.12 c-0.18 0.06 -0.36 0.12 -0.48 0.12 c-0.48 0.12 -0.9 0.06 -1.38 0 s-1.02 -0.06 -1.5 -0.18 c-1.02 -0.24 -1.98 -0.72 -2.82 -1.38 c-0.72 -0.6 -1.2 -1.26 -1.5 -2.04 c-0.06 -0.06 -0.06 -0.12 -0.12 -0.12 c-0.12 -0.12 -0.18 -0.24 -0.18 -0.42 c0.06 -0.06 0 -0.12 0 -0.12 c-0.18 -0.24 -0.3 -0.48 -0.24 -0.72 c0 -0.06 -0.06 -0.12 -0.06 -0.18 c-0.24 -0.24 -0.24 -0.54 -0.3 -0.84 s-0.18 -0.54 -0.18 -0.78 l-0.18 -1.08 c0 -0.18 0 -0.36 -0.06 -0.54 c0 -0.06 0.06 -0.12 0.06 -0.18 c0 -0.12 0 -0.24 -0.06 -0.3 c0 -0.24 -0.06 -0.42 0 -0.6 c0 0 0.06 -0.06 0 -0.06 c-0.12 -0.18 0.06 -0.42 0.06 -0.6 l0 -0.24 l0 -0.18 c0 -0.12 0.06 -0.3 0 -0.42 c-0.06 -0.18 -0.06 -0.3 0.06 -0.48 l0 -0.12 c0 -0.18 -0.06 -0.36 0 -0.54 c0 -0.18 0 -0.36 0.12 -0.54 c0.06 0 0 -0.06 0 -0.12 c0 -0.12 -0.06 -0.3 0 -0.42 c0 -0.06 0.06 -0.12 0.12 -0.24 c0 0 0 -0.06 -0.06 -0.12 c0 -0.12 0.06 -0.18 0.06 -0.24 c0 -0.12 0 -0.24 0.06 -0.36 c0 -0.18 0.06 -0.3 0.12 -0.48 c0 0 0.06 -0.3 0.06 -0.48 c0 -0.12 0 -0.24 0.12 -0.24 c0 -0.06 0.06 -0.12 0.06 -0.12 l0 -0.72 c0.06 -0.18 0.12 -0.3 0.12 -0.42 c0.06 -0.24 0.18 -0.42 0.24 -0.6 c0.06 -0.42 0.18 -0.78 0.3 -1.2 c0.06 -0.18 0.12 -0.42 0.18 -0.6 c0 -0.06 0.06 -0.12 0.12 -0.18 l0 -0.12 s0.06 -0.12 0.06 -0.18 c0.06 -0.06 0.06 -0.18 0.06 -0.24 c0.06 -0.06 0.06 -0.18 0.12 -0.18 c0.12 -0.12 0.12 -0.24 0.18 -0.42 c0 -0.06 0 -0.12 0.06 -0.24 c0 0 0 -0.06 0.06 -0.06 c0 -0.06 0.06 -0.18 0.06 -0.24 c-0.06 -0.24 0.3 -0.36 0.24 -0.66 c0 -0.06 0.12 -0.24 0.18 -0.36 c0.06 -0.18 0.12 -0.36 0.24 -0.54 s0.12 -0.48 0.36 -0.6 c0.06 -0.06 0.06 -0.24 0.06 -0.36 c0.12 -0.18 0.18 -0.42 0.3 -0.6 s0.24 -0.42 0.36 -0.6 c0.06 -0.12 0.12 -0.18 0.12 -0.3 c0.06 -0.18 0.18 -0.36 0.3 -0.48 l0 -0.12 c0.12 -0.18 0.18 -0.36 0.3 -0.54 c0.06 -0.12 0.06 -0.24 0.18 -0.42 c0.18 -0.24 0.18 -0.6 0.42 -0.84 c0.06 0 0.06 -0.06 0.06 -0.06 c-0.06 -0.18 0 -0.24 0.18 -0.24 c-0.18 -0.24 0.12 -0.36 0.18 -0.48 c0 0 0.18 0 0.18 0.06 c0.18 0.18 0.42 0.3 0.66 0.36 c0.06 0 0.12 0.06 0.12 0.12 c0.18 0.3 0.42 0.48 0.72 0.66 c0.12 0.06 0.18 0.18 0.12 0.3 c0 0 -0.06 0.06 -0.06 0.12 c0 0.12 0 0.24 -0.18 0.18 c0 0.18 0.06 0.3 -0.12 0.36 l-0.06 0.06 c-0.12 0.42 -0.24 0.78 -0.42 1.2 c-0.06 0.24 -0.12 0.42 -0.18 0.66 c-0.06 0.18 -0.12 0.36 -0.18 0.6 c0 0.06 -0.06 0.18 -0.06 0.24 c-0.18 0.54 -0.3 1.08 -0.42 1.62 c-0.12 0.42 -0.12 0.78 -0.24 1.2 c-0.06 0.24 0 0.54 -0.24 0.72 l0 0.12 c-0.06 0.18 0 0.36 -0.06 0.48 c-0.06 0.18 0 0.36 -0.12 0.54 c-0.06 0.06 -0.06 0.18 -0.06 0.3 s0.06 0.24 -0.06 0.3 c-0.06 0.06 0 0.18 0 0.24 c-0.06 0.06 -0.06 0.18 -0.06 0.24 c-0.06 0.18 -0.06 0.36 -0.12 0.48 c-0.06 0.42 -0.12 0.78 -0.18 1.14 c-0.12 0.42 -0.12 0.84 -0.18 1.26 c0 0.12 -0.12 0.18 -0.12 0.3 c-0.06 0.18 -0.12 0.36 -0.06 0.54 s0 0.42 -0.12 0.6 l0 0.06 c0.06 0.18 0 0.36 -0.06 0.6 c0 0 -0.06 0.06 0 0.12 c0 0.18 0 0.3 -0.12 0.36 c0 0.18 0.06 0.3 0.06 0.48 l0 0.06 c-0.24 0.06 -0.12 0.24 -0.12 0.36 c0 0.3 0.06 0.6 -0.06 0.9 c-0.06 0.06 0 0.12 0 0.18 c0 0.12 0.06 0.3 -0.06 0.42 l0 0.06 c-0.06 0.3 -0.06 0.54 0 0.84 c0 0.3 0 0.6 0.06 0.9 c0 0.06 -0.06 0.12 -0.12 0.12 l0 0.12 c0.12 0.42 0.12 0.84 0.12 1.26 c0 0 0.06 0.06 0.06 0.12 l0 0.24 c0.06 0.24 0.12 0.54 0.18 0.78 c0 0.24 0.06 0.48 0.12 0.72 c0 0.06 0.06 0.12 0 0.12 c-0.06 0.18 0 0.3 0.12 0.36 c0.06 0.12 0.12 0.24 0.12 0.3 c0 0.3 0.3 0.54 0.3 0.84 c0 0.18 0.18 0.3 0.24 0.48 c0.12 0.12 0.18 0.24 0.24 0.3 c0.06 0.12 0.18 0.24 0.24 0.36 c0.12 -0.06 0.3 -0.06 0.42 -0.12 c0.06 -0.06 0.12 -0.18 0.18 -0.3 l0.06 0 c0.12 -0.12 0.24 -0.18 0.36 -0.24 l0.06 0 c0.06 -0.24 0.36 -0.24 0.48 -0.48 l0 -0.06 c0.12 -0.18 0.12 -0.18 0.3 -0.24 c0.06 -0.18 0.12 -0.24 0.3 -0.24 c0.06 -0.18 0.12 -0.3 0.3 -0.36 c0 -0.18 0.06 -0.36 0.3 -0.42 c0 0 0.06 0 0.06 -0.06 c0.12 -0.12 0.18 -0.24 0.36 -0.3 c0.06 0 0.06 -0.18 0.12 -0.3 l0 -0.06 c0.24 -0.06 0.3 -0.24 0.3 -0.42 c0 -0.06 0 -0.12 0.06 -0.12 c0.24 -0.12 0.24 -0.48 0.54 -0.6 c0.06 0 0.06 -0.12 0.06 -0.24 c0.06 -0.12 0.12 -0.18 0.24 -0.12 l0 -0.18 c0.06 -0.12 0.12 -0.24 0.18 -0.24 c0.12 0 0.12 -0.12 0.18 -0.18 c0 -0.18 0.12 -0.24 0.24 -0.3 c0.06 -0.12 0.06 -0.3 0.12 -0.42 c0.24 -0.18 0.36 -0.42 0.42 -0.66 c0.06 0 0.06 -0.06 0.06 -0.06 c0.18 0 0.18 -0.18 0.24 -0.24 c0.18 -0.12 0.18 -0.3 0.24 -0.48 c0.06 -0.12 0.18 -0.18 0.3 -0.3 c0.06 -0.06 0.12 -0.12 0.12 -0.18 c0.06 -0.12 0.06 -0.24 0.12 -0.3 c0 -0.06 0.06 -0.12 0.12 -0.18 l0 -0.06 c0.24 -0.06 0.18 -0.3 0.3 -0.42 s0.18 -0.3 0.24 -0.48 c0.18 -0.24 0.3 -0.54 0.54 -0.72 c0.12 -0.12 0.18 -0.3 0.3 -0.42 l0.18 -0.36 c0 -0.12 0.06 -0.24 0.24 -0.3 l0.06 -0.06 c0.12 -0.3 0.24 -0.6 0.42 -0.9 c0.06 -0.12 0.12 -0.24 0.18 -0.3 s0.18 -0.12 0.24 -0.18 s0.06 -0.06 0.06 -0.12 c-0.12 -0.18 0.06 -0.3 0.18 -0.48 s0.3 -0.42 0.42 -0.6 c0.06 -0.06 0.06 -0.18 0.12 -0.24 c0.06 -0.18 0.12 -0.3 0.24 -0.48 l0.18 -0.18 c0 -0.06 0 -0.12 0.06 -0.12 c0 -0.18 0.06 -0.36 0.12 -0.42 c0.18 -0.06 0.24 -0.24 0.36 -0.36 c0.12 -0.18 0.3 -0.36 0.3 -0.6 c0 -0.06 0.06 -0.06 0.06 -0.06 c0.18 -0.18 0.18 -0.42 0.3 -0.6 c0.06 -0.12 0.24 -0.24 0.3 -0.36 s0.06 -0.24 0.12 -0.3 c0.06 -0.18 0.12 -0.36 0.24 -0.48 c0 -0.06 0 -0.12 0.06 -0.18 c0.06 0 0.06 -0.06 0.12 -0.06 c0.06 -0.06 0.12 -0.12 0.12 -0.18 c0.12 -0.18 0.12 -0.36 0.24 -0.54 c0.06 -0.12 0.12 -0.24 0.24 -0.3 l0 -0.06 c0 -0.24 0.18 -0.48 0.12 -0.78 c0 -0.06 0 -0.12 0.06 -0.18 s0.12 -0.18 0.12 -0.3 c0.06 -0.24 0.18 -0.48 0.24 -0.72 c0 -0.24 0.24 -0.36 0.18 -0.6 l0 -0.06 c0.18 -0.12 0.18 -0.36 0.36 -0.54 c0 -0.06 0.06 -0.12 0 -0.12 c-0.06 -0.24 0.06 -0.36 0.18 -0.54 l0 -0.18 c-0.06 -0.24 0 -0.3 0.24 -0.3 z\"></path>\n                </g>\n            </svg>\n        );\n    }\n}\n",":host {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 72px;\n    background-color: rgba(0, 0, 0, 0);\n    color: #fff;\n    margin-bottom: 16px;\n    position: sticky;\n    top: 0;\n    transition: background-color 0.15s ease-in-out;\n    border-bottom: 1px solid rgba(0, 0, 0, 0);\n}\n\n:host(.pinned) {\n    background-color: rgba(21, 20, 21, 0.85);\n    border-bottom: 1px solid #2f2f2f;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);\n    backdrop-filter: blur(8px);\n}\n\nnav {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 8px;\n    gap: 32px;\n    width: 1000px;\n    margin: 10px 0;\n\n    & > section {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        align-items: center;\n        gap: 16px;\n\n        &:first-child > a {\n            position: relative;\n            top: 4px;\n            display: flex;\n            flex-direction: row;\n            justify-content: center;\n            align-items: center;\n        }\n\n        &:last-child {\n            justify-content: flex-end;\n        }\n    }\n}\n\nnav ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    position: relative;\n    user-select: none;\n}\n\nnav > section > ul {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n\n    & > li {\n        background: transparent;\n        cursor: default;\n    }\n}\n\n\nnav a {\n    display:inline;\n    padding:0 10px;\n    color: #FFF;\n    font-size:16px;\n    line-height: 32px;\n    text-decoration:none;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n/* Hide Dropdowns by Default */\nnav ul ul {\n    display: none;\n    position: absolute;\n    top: 32px; /* the height of the main nav */\n    border: 1px solid #4f4f4f;\n    background: #212021;\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.35);\n    border-radius: 8px;\n    padding: 8px;\n\n    & > li:hover {\n        background: #2f2f2f;\n    }\n}\n\n/* Display Dropdowns on Hover */\nnav ul li:hover > ul {\n    display:inherit;\n}\n\n/* Fisrt Tier Dropdown */\nnav ul ul li {\n    height: 32px;\n    width:170px;\n    max-width: 170px;\n    float:none;\n    display:list-item;\n    position: relative;\n\n    & > a {\n        font-size: 13px;\n    }\n}\n\n/* Second, Third and more Tiers\t*/\nnav ul ul ul {\n    position: relative;\n    top: -32px;\n    left: 170px;\n    width: 170px;\n\n    & > a, & > li {\n        position: relative;\n        top: 0;\n        left: 0;\n    }\n}\n\n/* Change this in order to change the Dropdown symbol */\nul ul li > a:after { content:  '...'; }\nul ul li > a:only-child:after { content: ''; }\n","import {Component, h, Host, Listen, Prop, State, Watch} from '@stencil/core';\nimport {Entry, FileEntry, PathEntry, Repository} from '../Repository';\n\n@Component({\n    tag: 'x-navbar',\n    styleUrl: 'x-navbar.scss',\n    shadow: true,\n})\nexport class XNavbar {\n\n    @State() private isPinned: boolean = false;\n\n    private entries: PathEntry[] = [];\n\n    componentWillLoad() {\n        this.entries = Repository.entries.filter(e => e.type === 'dir') as PathEntry[];\n        document.querySelector('x-app > #content')?.addEventListener('scroll', (e) => {\n            this.isPinned = (e.target as HTMLElement).scrollTop > 1;\n        })\n    }\n\n    render() {\n        return (\n            <Host class={{pinned: this.isPinned}}>\n                <nav>\n                    <section>\n                        <a href={\"#\"}>\n                            <x-signature size={48}/>\n                        </a>\n                    </section>\n                    <section>\n                        {this.renderMenu({type: 'dir', name: '', children: this.entries}, true)}\n                    </section>\n                </nav>\n            </Host>\n        );\n    }\n\n    private renderMenu(entry: PathEntry, isRoot: boolean = false) {\n        return (\n            <ul>\n                {entry.children.map((e, i) => (\n                    <li tabIndex={isRoot ? i : undefined}>\n                        {e.type === 'dir' ? [\n                            <a href=\"javascript:void(0)\">{e.name}</a>,\n                            this.renderMenu(e)\n                        ] : (\n                            <a href={`#${e.route}`}>{e.name}</a>\n                        )}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}\n","* {\n    box-sizing: border-box;\n}\n\n:host {\n    justify-self: flex-start;\n}\n\nmain {\n    max-width: 1200px;\n    width: 1000px;\n    margin: 0 auto;\n    background: #212021;\n    color: #fff;\n    padding: 15px;\n    border-radius: 8px;\n    border: 1px solid #2f2e2f;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, .35);\n\n    & > footer {\n        display: flex;\n        width: 100%;\n        justify-content: flex-end;\n        gap: 8px;\n        margin-top: 32px;\n        padding-top: 16px;\n        border-top: 1px solid #292929;\n    }\n}\n\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {\n    main {\n        width: 100%;\n        padding: 8px;\n    }\n}\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {\n    main {\n        width: 100%;\n        padding: 8px;\n    }\n}\n\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {\n    main {\n        width: 100%;\n        padding: 12px;\n    }\n}\n\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {\n    main {\n        width: 100%;\n        padding: 12px;\n    }\n}\n\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 1000px) {\n    main {\n        width: 1000px;\n        padding: 15px;\n    }\n}\n\nh1 {\n    font-size: 34px;\n    margin: 0 0 8px;\n    padding: 0 0 8px;\n    border-bottom: 1px solid #b99755;\n}\n\nh2 {\n    font-size: 28px;\n    margin: 8px 0;\n    padding: 8px 0;\n    border-bottom: 1px solid #b99755;\n}\n\nh3 {\n    font-size: 24px;\n    margin: 8px 0;\n    padding: 4px 8px;\n    border-left: 6px solid #b99755;\n}\n\nh4 {\n    font-size: 20px;\n    margin: 8px 0;\n    padding: 4px 8px;\n    border-left: 6px solid #b99755;\n}\n\nh5 {\n    font-size: 18px;\n    margin: 8px 0;\n    padding: 4px 8px;\n    border-left: 6px solid #b99755;\n}\n\nh6 {\n    color: #c0c0c0;\n    font-size: 12px;\n    font-weight: normal;\n}\n\na {\n    text-decoration: underline;\n    color: #b99755;\n\n    &:hover {\n        color: #ffd0a0;\n    }\n}\n\np {\n    font-size: 14px;\n    padding: 8px 0;\n\n    & > img {\n        display: block;\n        max-width: 100%;\n        height: auto;\n        margin: 0 auto;\n        border: 4px solid #1a1a1a;\n        border-radius: 8px;\n    }\n\n    & > code {\n        background: #101010;\n        padding: 4px;\n        border: 1px solid #2f2f2f;\n        border-radius: 4px;\n        font-family: \"Droid Sans Mono\", monospace;\n    }\n}\n\n.markdown-alert {\n    padding: 8px;\n    border: 1px solid #f5c6cb;\n    border-radius: 4px;\n    margin: 8px 0;\n\n    & > .markdown-alert-title {\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        align-items: flex-start;\n        gap: 8px;\n        font-size: 18px;\n        margin: 0;\n        padding: 0;\n\n        & > svg {\n            fill: currentColor;\n            width: 24px;\n            height: 24px;\n            padding: 4px;\n        }\n    }\n\n    & > p {\n        padding: 0;\n        margin: -4px 0 0 40px;\n    }\n\n    &.markdown-alert-note {\n        border-color: #17a2b8;\n        background: rgba(23, 162, 184, 0.1);\n        color: #a0f0ff;\n        text-shadow: 1px 1px #000;\n    }\n\n    &.markdown-alert-warning {\n        border-color: #ffc107;\n        background: rgba(255, 193, 7, 0.1);\n        color: #ffc107;\n        text-shadow: 1px 1px #000;\n    }\n\n    &.markdown-alert-important {\n        border-color: #dc3545;\n        background: rgba(220, 53, 69, 0.1);\n        color: #ffd0a0;\n        text-shadow: 1px 1px #000;\n    }\n\n    &.markdown-alert-tip {\n        border-color: #28a745;\n        background: rgba(40, 167, 69, 0.1);\n        color: #88f7a5;\n        text-shadow: 1px 1px #000;\n    }\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse;\n\n    & > thead {\n        & > tr {\n            & > th {\n                text-align: left;\n                border-bottom: 1px solid #b99755;\n                padding: 4px;\n            }\n        }\n    }\n\n    & > tbody {\n        & > tr {\n            & > td {\n                padding: 4px;\n            }\n        }\n    }\n}\n","import {Component, h, Host, Prop, State, Watch} from '@stencil/core';\nimport {Repository, PageEntry} from '../Repository';\n\n\n@Component({\n    tag: 'x-page',\n    styleUrl: 'x-page.scss',\n    shadow: true,\n})\nexport class XPage {\n\n    @Prop() entry: PageEntry | null = null;\n\n    @State() private html: string = '';\n    @State() private prev: PageEntry | undefined;\n    @State() private next: PageEntry | undefined;\n\n    private mainEl: HTMLElement | undefined;\n\n    componentWillLoad() {\n        this.onEntryChanged();\n        window.addEventListener('hashchange', () => this.onEntryChanged());\n    }\n\n    render() {\n        return (\n            <Host>\n                <main>\n                    <div\n                        ref={el => this.mainEl = el}\n                        innerHTML={this.html}\n                    />\n                    {(this.next || this.prev) && (\n                        <footer>\n                            {this.prev && <x-button href={this.prev.path}>Previous: {this.prev.name}</x-button>}\n                            {this.next && <x-button href={this.next.path}>Next: {this.next.name}</x-button>}\n                        </footer>\n                    )}\n                </main>\n            </Host>\n        );\n    }\n\n    @Watch('entry')\n    private async onEntryChanged(): Promise<void> {\n        if (!this.entry) return;\n\n        this.html = this.entry.html;\n        this.prev = Repository.findPrev(this.entry);\n        this.next = Repository.findNext(this.entry);\n\n        const anchor = window.location.hash.split('--')[1] ?? '';\n        setTimeout(() => {\n            requestAnimationFrame(() => {\n                for (const el of this.mainEl?.children ?? []) {\n                    if (el.tagName.match(/^H[1-6]$/)) {\n                        const id = this.slugify(el.textContent?.toLowerCase() ?? '');\n                        if (id === anchor) {\n                            console.log('FOUND ANCHOR:', id, el);\n                            el.scrollIntoView({behavior: 'smooth', block: 'start'});\n                        }\n                    }\n                }\n            });\n        }, 250);\n    }\n\n    private slugify(text: string) {\n        text = text.replace(/^\\d+\\./, '').trim();\n        return text.toLowerCase().replace(/[^\\w ]+/g, '').replace(/ +/g, '-');\n    }\n}\n",":host {\n    display: inline-block;\n}\n\nsvg {\n    object-fit: scale-down;\n}\n","import {Component, h, Prop} from \"@stencil/core\";\n\n@Component({\n    tag: 'x-signature',\n    styleUrl: 'x-signature.scss',\n    shadow: true,\n})\nexport class XLogo {\n    @Prop() size: number = 90;\n\n    public render() {\n        return (\n            <svg viewBox=\"0 0 250 70\" preserveAspectRatio=\"xMidYMid meet\" class=\"css-1af7stb\"\n                 id=\"bedechag\"\n                 style={{height: `${this.size}px`}}\n            >\n                <defs id=\"SvgjsDefs1001\">\n                    <linearGradient id=\"SvgjsLinearGradient1013\">\n                        <stop id=\"SvgjsStop1014\" stop-color=\"#905e26\" offset=\"0\"></stop>\n                        <stop id=\"SvgjsStop1015\" stop-color=\"#f5ec9b\" offset=\"0.5\"></stop>\n                        <stop id=\"SvgjsStop1016\" stop-color=\"#905e26\" offset=\"1\"></stop>\n                    </linearGradient>\n                    <linearGradient id=\"SvgjsLinearGradient1017\">\n                        <stop id=\"SvgjsStop1018\" stop-color=\"#905e26\" offset=\"0\"></stop>\n                        <stop id=\"SvgjsStop1019\" stop-color=\"#f5ec9b\" offset=\"0.5\"></stop>\n                        <stop id=\"SvgjsStop1020\" stop-color=\"#905e26\" offset=\"1\"></stop>\n                    </linearGradient>\n                    <linearGradient id=\"SvgjsLinearGradient1021\">\n                        <stop id=\"SvgjsStop1022\" stop-color=\"#905e26\" offset=\"0\"></stop>\n                        <stop id=\"SvgjsStop1023\" stop-color=\"#f5ec9b\" offset=\"0.5\"></stop>\n                        <stop id=\"SvgjsStop1024\" stop-color=\"#905e26\" offset=\"1\"></stop>\n                    </linearGradient>\n                </defs>\n                <g id=\"SvgjsG1009\"\n                   transform=\"matrix(1.76341672322645,0,0,1.76341672322645,0,-20)\"\n                   fill=\"url(#SvgjsLinearGradient1021)\">\n                    <path\n                        d=\"M47.88 51.44 c-0.48 0 -0.88 -0.32 -0.96 -0.84 c-0.12 -0.44 -0.08 -0.96 0.08 -1.48 c0.24 -0.8 0.48 -1.48 0.72 -2.08 c1.04 -2.68 2.28 -5.36 3.36 -7.68 c1.8 -3.8 3.52 -7.28 5.28 -10.64 c0.48 -0.92 1 -1.84 1.52 -2.76 c0.28 -0.44 0.52 -0.88 0.8 -1.36 l0.48 -0.88 c0.08 -0.2 0 -0.48 -0.16 -0.6 c-0.12 -0.12 -0.28 -0.12 -0.36 -0.12 s-0.12 0 -0.2 0.04 c-0.16 0.08 -0.32 0.16 -0.44 0.28 l-0.44 0.36 c-0.12 0.08 -0.24 0.2 -0.32 0.28 c-1.96 1.64 -3.92 3.24 -5.84 4.88 l-15.88 13.24 c-2.36 1.96 -4.88 3.8 -7.52 5.44 c-1.88 1.2 -3.48 2.08 -5.08 2.72 c-0.88 0.4 -1.96 0.76 -3.12 0.8 l-0.2 0 c-0.4 0 -0.68 0 -0.96 -0.04 c-0.84 -0.16 -1.48 -0.64 -1.8 -1.48 c-0.2 -0.6 -0.24 -1.2 -0.12 -1.8 c0.16 -1.08 0.52 -2.16 1.08 -3.44 c0.8 -1.76 1.68 -3.4 2.6 -5.08 c2.76 -4.92 5.8 -9.84 8.4 -14.04 l0.04 -0.04 c1.12 -1.76 2.24 -3.6 3.24 -5.48 c0.44 -0.84 0.88 -1.68 1.16 -2.6 c0.16 -0.44 0.28 -0.88 0.36 -1.36 c0.16 -1.12 -0.28 -1.8 -1.32 -2.16 c-0.44 -0.16 -0.92 -0.24 -1.44 -0.28 l-0.76 0 c-1.24 0 -2.4 0.12 -3.56 0.4 c-1.52 0.32 -2.92 0.72 -4.24 1.24 c-5.8 2.16 -11 5.16 -15.48 8.88 c-1.44 1.2 -2.56 2.36 -3.48 3.6 c-0.48 0.6 -0.92 1.28 -1.2 1.8 c-0.36 0.52 -0.6 1.16 -0.76 1.84 c-0.4 1.68 0.12 2.96 1.6 3.8 c0.92 0.56 1.96 0.84 3.2 0.84 l0.08 0 c0.16 0 0.32 -0.04 0.48 -0.04 l0.52 0 l0.32 0 c0.24 0.04 0.76 0.12 0.76 0.56 c0 0.32 -0.24 0.56 -0.64 0.6 c-0.6 0.08 -1.12 0.08 -1.6 0.08 c-1.36 0 -2.52 -0.24 -3.56 -0.8 c-0.2 -0.12 -0.36 -0.24 -0.52 -0.36 c-1.68 -1.16 -2.32 -2.8 -1.88 -4.8 c0.2 -1 0.64 -1.96 1.28 -3 c0.6 -1 1.4 -2 2.48 -3.08 c1.28 -1.32 2.76 -2.6 4.36 -3.76 c4.64 -3.36 9.56 -5.96 14.64 -7.72 c1.56 -0.52 3.12 -0.92 4.6 -1.16 c0.48 -0.08 1 -0.12 1.52 -0.12 c0.24 -0.04 0.52 -0.04 0.76 -0.08 c0.2 0 0.36 0.04 0.56 0.04 c0.48 0.04 0.96 0.04 1.44 0.08 c0.64 0.08 1.24 0.28 1.76 0.6 c0.84 0.52 1.28 1.24 1.32 2.24 c0.08 0.72 -0.04 1.48 -0.32 2.28 c-0.28 0.88 -0.68 1.8 -1.24 2.84 c-0.96 1.84 -2.04 3.6 -3.28 5.56 c-2.92 4.72 -5.56 8.96 -8.04 13.4 c-1.04 1.84 -1.88 3.4 -2.68 5.08 c-0.4 0.8 -0.84 1.8 -1.12 2.84 c-0.16 0.52 -0.28 1.08 -0.2 1.68 c0.08 0.72 0.48 1.08 1.16 1.16 c0.16 0.04 0.36 0.04 0.52 0.04 c0.4 0 0.76 -0.04 1.16 -0.16 c0.92 -0.2 1.88 -0.6 3 -1.16 c1.64 -0.8 3.32 -1.84 5.32 -3.2 c2.44 -1.68 5 -3.6 7.96 -6.08 c2.12 -1.8 4.28 -3.6 6.44 -5.4 c5.32 -4.4 10.84 -8.96 16.12 -13.6 l1.28 -1.08 c0.52 -0.48 1.08 -0.96 1.6 -1.44 c0.36 -0.28 0.64 -0.52 0.96 -0.68 c0.08 -0.04 0.2 -0.08 0.32 -0.08 s0.24 0.04 0.36 0.12 c0.24 0.2 0.32 0.44 0.24 0.72 c-0.08 0.24 -0.2 0.52 -0.36 0.76 c-0.24 0.48 -0.52 0.88 -0.76 1.2 c-3.2 4.64 -6.12 9.8 -9.24 16.36 c-1.6 3.28 -3.2 6.68 -4.68 10.2 c-0.32 0.76 -0.64 1.6 -0.92 2.36 l-0.08 0.28 c-0.12 0.36 -0.28 0.96 0.12 1.48 c0.04 0.08 0.08 0.16 0.12 0.32 c0.08 0.28 -0.04 0.56 -0.36 0.64 c-0.12 0.08 -0.24 0.08 -0.36 0.08 z M57.84 43.12 c-0.8 0 -0.96 -0.72 -1 -1.12 l0 -0.2 l0 -0.24 c0.04 -0.08 0.04 -0.12 0.04 -0.2 l0.12 -0.68 c0.24 -0.68 0.44 -1.4 0.72 -2.08 c1.32 -3.16 3.16 -6.08 5.52 -8.64 c0.32 -0.32 0.6 -0.6 0.92 -0.76 c0.12 -0.08 0.24 -0.08 0.36 -0.08 c0.16 0 0.28 0.04 0.4 0.16 c0.16 0.2 0.16 0.48 0 0.72 c-0.08 0.12 -0.2 0.24 -0.32 0.4 c-0.08 0.04 -0.12 0.08 -0.16 0.12 c-2.36 2.48 -4.2 5.36 -5.56 8.52 c0 0.08 -0.04 0.16 -0.08 0.2 c-0.12 0.32 -0.28 0.68 -0.28 1.12 c0 0.32 0.28 0.56 0.56 0.56 c0.08 0 0.2 0 0.28 -0.08 l0.04 0 c0.2 -0.16 0.44 -0.28 0.64 -0.48 c0.6 -0.52 1.16 -1.08 1.72 -1.6 c2.56 -2.4 4.84 -4.52 7.36 -6.52 c0.6 -0.52 1.28 -0.96 1.88 -1.4 c0.36 -0.24 0.68 -0.4 0.96 -0.44 c0.12 0 0.2 -0.04 0.28 -0.04 c0.28 0 0.52 0.12 0.68 0.28 c0.12 0.16 0.2 0.44 0.16 0.76 c-0.04 0.28 -0.12 0.56 -0.24 0.88 c-0.24 0.6 -0.52 1.2 -0.8 1.76 l-0.08 0.2 c-0.6 1.36 -1.28 2.84 -1.76 4.4 c-0.04 0.04 -0.04 0.08 -0.08 0.16 c-0.08 0.28 -0.2 0.56 -0.16 0.96 c0.04 0.32 0.28 0.52 0.56 0.52 l0.12 0 c0.4 -0.04 0.68 -0.24 0.96 -0.44 l0.16 -0.12 c0.48 -0.28 0.96 -0.6 1.44 -0.92 c0.64 -0.44 1.32 -0.84 1.96 -1.28 c0.8 -0.48 1.64 -0.92 2.44 -1.24 c0.28 -0.08 0.64 -0.24 1 -0.28 l0.32 0 c0.8 0 1.32 0.4 1.56 1.28 l0.12 0.44 c0.04 0.16 0.08 0.36 0.12 0.52 c0.12 0.4 0.36 0.6 0.72 0.6 c0.12 0 0.2 0 0.32 -0.04 c0.44 -0.16 0.8 -0.32 1.08 -0.48 c0.56 -0.36 1.16 -0.72 1.72 -1.04 l0.28 -0.2 c1.08 -0.64 2.12 -1.32 3.16 -1.96 l0.6 -0.4 c0.16 -0.12 0.32 -0.24 0.52 -0.36 s0.4 -0.24 0.6 -0.32 c0.08 0 0.12 -0.04 0.2 -0.04 c0.24 0 0.44 0.12 0.56 0.36 c0.16 0.24 0.12 0.48 -0.12 0.72 c-0.16 0.16 -0.36 0.32 -0.64 0.48 c-2.08 1.28 -3.84 2.4 -5.64 3.48 c-0.52 0.32 -1.08 0.6 -1.56 0.84 c-0.4 0.2 -0.88 0.32 -1.36 0.4 l-0.28 0 c-0.92 0 -1.28 -0.64 -1.36 -1.2 l-0.12 -0.48 c0 -0.2 -0.04 -0.4 -0.12 -0.64 c-0.08 -0.32 -0.36 -0.56 -0.72 -0.56 l-0.2 0 c-0.44 0.16 -0.8 0.28 -1.12 0.44 c-1.08 0.52 -2.08 1.16 -3.08 1.8 l-0.24 0.16 c-0.28 0.2 -0.56 0.36 -0.88 0.56 l-1.24 0.84 c-0.48 0.28 -1 0.56 -1.68 0.8 c-0.16 0.08 -0.32 0.08 -0.48 0.08 c-0.36 0 -0.68 -0.12 -0.92 -0.36 c-0.24 -0.28 -0.36 -0.72 -0.32 -1.2 c0.04 -0.4 0.16 -0.84 0.28 -1.28 l0.04 -0.08 c0.36 -1.36 0.92 -2.68 1.44 -3.96 l0.12 -0.24 c0.08 -0.24 0.2 -0.44 0.28 -0.68 l0 -0.08 c0.16 -0.4 0.12 -0.68 -0.2 -0.84 c-0.08 -0.08 -0.16 -0.08 -0.28 -0.08 c-0.24 0 -0.44 0.16 -0.6 0.28 l-0.36 0.28 c-0.44 0.4 -0.92 0.76 -1.36 1.16 l-2.96 2.72 c-1.08 1 -2.16 2 -3.24 2.96 c-0.68 0.64 -1.4 1.2 -2.04 1.72 c-0.36 0.32 -0.76 0.52 -1.16 0.64 c-0.2 0.04 -0.36 0.08 -0.52 0.08 z M80.60000000000001 50.44 c-0.08 0 -0.12 0 -0.2 -0.04 c-0.16 -0.08 -0.28 -0.24 -0.28 -0.48 c0.08 -0.28 0.16 -0.52 0.28 -0.84 l0.2 -0.32 c0.48 -0.88 0.96 -1.76 1.44 -2.6 c0.16 -0.36 0.36 -0.68 0.56 -1.04 c2.12 -3.2 4.04 -6.56 5.92 -9.76 c1.28 -2.08 2.52 -4.24 3.8 -6.32 c1.32 -2.2 2.72 -4.4 4.04 -6.52 l1.16 -1.88 c0.16 -0.24 0.32 -0.44 0.48 -0.56 c0.12 -0.12 0.24 -0.16 0.4 -0.16 c0.04 0 0.12 0 0.16 0.04 c0.16 0.04 0.32 0.16 0.28 0.48 c0 0.24 -0.12 0.48 -0.28 0.72 l-0.24 0.36 l-0.88 1.48 c-2.24 3.48 -4.4 7.08 -6.24 10.16 l-0.12 0.2 c-0.08 0.16 -0.2 0.36 -0.28 0.56 c-0.12 0.12 -0.28 0.48 -0.12 0.76 c0.16 0.16 0.32 0.2 0.44 0.2 c0.2 0 0.36 -0.12 0.44 -0.2 l0.12 -0.04 l0.48 -0.36 c0.2 -0.12 0.32 -0.2 0.52 -0.32 c0.84 -0.56 1.56 -0.88 2.24 -1.08 c0.32 -0.12 0.6 -0.16 0.84 -0.16 c0.04 0 0.12 0 0.16 0.04 c0.44 0.04 0.8 0.24 0.96 0.56 c0.2 0.32 0.2 0.72 0.08 1.16 c-0.12 0.36 -0.36 0.72 -0.64 1.08 c-0.12 0.12 -0.28 0.28 -0.36 0.4 l-0.32 0.32 c-0.24 0.28 -0.24 0.6 -0.08 0.76 c0.12 0.12 0.28 0.16 0.44 0.16 l0.12 0 c0.32 -0.08 0.6 -0.16 0.84 -0.2 c1.56 -0.48 3 -0.96 4.4 -1.52 c1.08 -0.4 2.16 -0.84 3.2 -1.2 l0.16 -0.08 c0.28 -0.12 0.52 -0.2 0.84 -0.24 c0.04 -0.04 0.08 -0.04 0.12 -0.04 c0.28 0 0.44 0.16 0.48 0.4 s-0.08 0.48 -0.4 0.68 c-0.12 0.08 -0.32 0.2 -0.56 0.28 l-0.24 0.08 c-3.36 1.32 -6.84 2.64 -10.32 3.56 c-1.76 0.44 -3.16 0.64 -4.44 0.64 l-0.04 0 c-0.08 0 -0.2 0 -0.32 0.04 l-0.28 0 c-0.16 0 -0.24 0 -0.36 -0.04 l-0.28 0 c-0.84 0 -1.32 0.52 -1.68 0.96 c-0.68 0.84 -1.44 1.84 -2.08 2.88 c-1 1.72 -1.96 3.4 -3 5.12 c-0.2 0.4 -0.44 0.8 -0.72 1.2 c-0.12 0.2 -0.32 0.4 -0.44 0.56 c-0.16 0.12 -0.28 0.16 -0.4 0.16 z M92.08000000000001 36.92 c0.08 0 0.12 0 0.2 -0.04 c1.12 -0.36 2.04 -0.92 2.76 -1.72 c0.12 -0.12 0.16 -0.24 0.2 -0.32 l0 -0.04 l0 -0.2 c-0.04 -0.2 -0.24 -0.36 -0.44 -0.36 c-0.08 0 -0.12 0.04 -0.2 0.04 c-0.92 0.32 -1.8 0.88 -2.76 1.72 c-0.16 0.16 -0.24 0.4 -0.24 0.56 c0.04 0.24 0.24 0.36 0.48 0.36 z M104.40000000000002 40.4 c-0.12 0 -0.28 -0.04 -0.4 -0.12 c-0.32 -0.16 -0.44 -0.48 -0.36 -0.92 c0.04 -0.4 0.12 -0.76 0.24 -1.12 c0.32 -0.96 0.68 -1.96 1.04 -2.96 l0.44 -1.04 c0.36 -0.88 0.72 -1.84 0.96 -2.8 c0 -0.12 0.08 -0.2 0.12 -0.32 c0.12 -0.2 0.32 -0.36 0.52 -0.36 c0.04 0 0.08 0.04 0.12 0.04 c0.28 0.04 0.48 0.28 0.48 0.56 c0.04 0.24 -0.04 0.48 -0.12 0.76 l-0.48 1.32 c-0.16 0.4 -0.28 0.8 -0.44 1.2 l-0.12 0.56 l-0.04 0.12 c-0.04 0.16 0.04 0.44 0.28 0.48 c0.08 0.04 0.16 0.08 0.24 0.08 c0.12 0 0.24 -0.08 0.28 -0.12 c0.24 -0.2 0.4 -0.4 0.56 -0.6 c0.2 -0.2 0.36 -0.4 0.52 -0.6 l0.8 -0.92 c0.28 -0.32 0.56 -0.6 0.84 -0.8 c0.36 -0.28 0.72 -0.44 1.04 -0.44 c0.6 0 0.96 0.52 1.16 0.96 c0.08 0.2 0.16 0.4 0.2 0.6 c0.24 0.76 0.76 1.28 1.6 1.6 c0.64 0.24 1.24 0.36 1.84 0.36 c0.16 0 0.32 0 0.48 -0.04 c2.56 -0.24 4.68 -0.84 6.6 -1.72 l0.04 -0.04 c0.04 -0.04 0.08 -0.04 0.12 -0.04 c0.12 -0.04 0.2 -0.08 0.32 -0.08 c0.16 0 0.32 0.08 0.4 0.2 c0.16 0.24 0.12 0.56 -0.08 0.84 c-0.16 0.2 -0.4 0.36 -0.8 0.48 c-1.52 0.64 -2.72 1 -3.88 1.24 l-0.2 0.04 c-1 0.16 -2.04 0.36 -3.08 0.4 l-0.04 0 c-0.92 0 -1.84 -0.24 -2.8 -0.72 c-0.56 -0.28 -1 -0.68 -1.32 -1.24 l-0.12 -0.24 l-0.24 -0.36 c-0.2 -0.32 -0.44 -0.36 -0.6 -0.36 c-0.2 0 -0.36 0.08 -0.56 0.24 c-0.24 0.28 -0.52 0.56 -0.76 0.88 l-1.32 1.6 c-0.44 0.52 -0.84 1.08 -1.28 1.6 c-0.36 0.44 -0.64 0.76 -0.96 1.08 c-0.16 0.2 -0.4 0.36 -0.64 0.52 c-0.2 0.16 -0.4 0.2 -0.6 0.2 z M124.52000000000002 46.72 c-1.12 0 -1.64 -0.52 -1.64 -1.48 c0 -0.56 0.2 -1.08 0.44 -1.56 c0.52 -1.08 1.2 -2.08 1.8 -3.08 l0.36 -0.56 c0.12 -0.24 0.28 -0.44 0.4 -0.68 c0.08 -0.2 0.12 -0.44 0.04 -0.64 c-0.08 -0.16 -0.28 -0.28 -0.48 -0.28 c-0.08 0 -0.2 0 -0.24 0.04 l-0.96 0.36 c-1.56 0.64 -2.8 1.04 -4 1.24 c-0.2 0.04 -0.4 0.04 -0.6 0.04 c-0.36 0 -0.76 -0.04 -1.08 -0.2 c-0.4 -0.12 -0.68 -0.36 -0.8 -0.68 c-0.16 -0.28 -0.16 -0.64 0 -1.04 c0.12 -0.32 0.36 -0.6 0.68 -0.96 c1.4 -1.36 2.84 -2.36 4.4 -3.08 c0.84 -0.4 1.8 -0.64 2.8 -0.76 c0.24 0 0.48 -0.04 0.72 -0.04 c1.04 0 1.92 0.32 2.6 0.92 c0.2 0.2 0.44 0.28 0.72 0.28 c0.2 0 0.4 -0.04 0.6 -0.16 l0.36 -0.2 c0.16 -0.08 0.28 -0.16 0.44 -0.24 c0.2 -0.08 0.4 -0.16 0.6 -0.16 l0.08 0 c0.24 0 0.4 0.12 0.52 0.32 c0.08 0.2 0.04 0.44 -0.12 0.64 c-0.16 0.12 -0.32 0.24 -0.48 0.32 c-0.64 0.36 -1.12 0.84 -1.64 1.32 c-2.36 2.24 -4 4.92 -5.44 7.52 c-0.08 0.16 -0.16 0.4 -0.24 0.68 c-0.04 0.16 0 0.32 0.12 0.44 c0.08 0.16 0.24 0.2 0.4 0.2 l0.04 0 c0.2 0 0.44 -0.04 0.68 -0.16 l0.12 -0.08 c0.6 -0.32 1.24 -0.68 1.84 -1.04 c2.04 -1.36 3.92 -2.8 5.52 -4.04 c1.92 -1.48 4.44 -3.44 7.08 -5.32 c0.28 -0.16 0.56 -0.36 0.8 -0.48 c0.08 -0.04 0.16 -0.08 0.24 -0.08 c0.16 0 0.28 0.08 0.4 0.2 c0.2 0.2 0.2 0.48 0.04 0.72 s-0.4 0.44 -0.68 0.64 c-0.04 0.04 -0.08 0.04 -0.16 0.08 l-2.12 1.6 l-4.16 3.12 l-1.12 0.8 c-1.44 1.08 -2.92 2.2 -4.36 3.24 c-1.04 0.76 -2.04 1.36 -3.04 1.84 c-0.56 0.28 -1.08 0.44 -1.44 0.44 l-0.04 0 z M120.20000000000002 38.76 l0.12 0 c0.44 0 0.84 -0.12 1.16 -0.24 l0.2 -0.08 c1.84 -0.56 3.56 -1.4 4.96 -2.12 c0.24 -0.08 0.4 -0.2 0.6 -0.32 c0.28 -0.16 0.44 -0.4 0.44 -0.64 c-0.04 -0.44 -0.4 -0.56 -0.56 -0.6 c-0.28 -0.08 -0.56 -0.12 -0.88 -0.12 c-0.12 0 -0.24 0 -0.36 0.04 c-2.68 0.24 -4.64 1.76 -6.04 3.04 c-0.24 0.2 -0.28 0.56 -0.12 0.76 c0.12 0.12 0.24 0.2 0.32 0.2 l0.04 0.04 l0.04 0 z\"></path>\n                </g>\n            </svg>\n        );\n    }\n}\n","* { box-sizing: border-box;}\n\n:host {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n    background: linear-gradient(to bottom, rgba(0, 0, 0, .55) 0, rgba(0, 0, 0, .85) 50%);\n    color: #fff;\n    width: 100%;\n    margin-top: 50px;\n    flex-wrap: wrap;\n}\n\nmain {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 32px;\n    padding: 32px;\n    max-width: 1300px;\n    flex-wrap: wrap;\n\n    & > section {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n        align-items: flex-start;\n        gap: 16px;\n        min-width: 250px;\n\n        & > div > section {\n            margin-top: 32px;\n        }\n\n        h1 {\n            margin: 0;\n            padding: 0;\n            color: #b99755;\n            font-size: 24px;\n            font-weight: 600;\n            font-style: italic;\n            font-family: \"Segoe Script\", handwriting, cursive;\n        }\n\n        a {\n            color: #fff;\n            text-decoration: none;\n            font-size: 16px;\n            font-weight: 400;\n            padding: 0;\n            margin: 0;\n        }\n\n        ul {\n            list-style-type: disc;\n            font-size: 10px;\n            padding: 0 0 0 16px;\n            margin: 0 0 32px 8px;\n\n            li {\n                font-weight: 400;\n                padding: 0;\n                margin: 0;\n\n                & > a {\n                    color: #c0c0c0;\n                    font-size: 13px;\n                }\n            }\n        }\n    }\n}\n","import {Component, Host, h} from \"@stencil/core\";\nimport {Repository, Entry, PathEntry, FileEntry} from \"../Repository\";\n\n@Component({\n    tag: 'x-sitemap',\n    styleUrl: 'x-sitemap.scss',\n    shadow: true,\n})\nexport class XSitemap {\n    render() {\n        return (\n            <Host>\n                <main>\n                    {Repository.entries.map(e => this.renderEntry(e))}\n                </main>\n            </Host>\n        )\n    }\n\n    private renderEntry(entry: Entry) {\n        if (entry.type === 'dir') {\n            return this.renderPath(entry);\n        }\n\n        const result = [<a href={`#${entry.route}`}>{entry.name}</a>];\n\n        if (entry.chapters.length > 0) {\n            result.push(\n                <ul>\n                    {entry.chapters.map(c => (\n                        <li><a href={`#${entry.route}--${c.slug}`}>{c.name}</a></li>\n                    ))}\n                </ul>\n            )\n        }\n\n        return result;\n    }\n\n    private renderPath(entry: PathEntry) {\n        return (\n            <section>\n                <h1>{entry.name}</h1>\n                <div>\n                    {entry.children.map(e => this.renderEntry(e))}\n                </div>\n            </section>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}